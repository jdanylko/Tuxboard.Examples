!function r(n,i,a){function s(t,e){if(!i[t]){if(!n[t]){var o="function"==typeof require&&require;if(!e&&o)return o(t,!0);if(l)return l(t,!0);throw(e=new Error("Cannot find module '"+t+"'")).code="MODULE_NOT_FOUND",e}o=i[t]={exports:{}},n[t][0].call(o.exports,function(e){return s(n[t][1][e]||e)},o,o.exports,r,n,i,a)}return i[t].exports}for(var l="function"==typeof require&&require,e=0;e<a.length;e++)s(a[e]);return s}({1:[function(t,o,e){function v(e){var t;return null==e?window:"[object Window]"!==e.toString()?(t=e.ownerDocument)&&t.defaultView||window:e}function p(e){return e instanceof v(e).Element||e instanceof Element}function l(e){return e instanceof v(e).HTMLElement||e instanceof HTMLElement}function i(e){return"undefined"!=typeof ShadowRoot&&(e instanceof v(e).ShadowRoot||e instanceof ShadowRoot)}Object.defineProperty(e,"__esModule",{value:!0});var L=Math.max,A=Math.min,_=Math.round;function a(){var e=navigator.userAgentData;return null!=e&&e.brands&&Array.isArray(e.brands)?e.brands.map(function(e){return e.brand+"/"+e.version}).join(" "):navigator.userAgent}function O(){return!/^((?!chrome|android).)*safari/i.test(a())}function d(e,t,o){void 0===t&&(t=!1),void 0===o&&(o=!1);var r=e.getBoundingClientRect(),n=1,i=1;t&&l(e)&&(n=0<e.offsetWidth&&_(r.width)/e.offsetWidth||1,i=0<e.offsetHeight&&_(r.height)/e.offsetHeight||1);t=(p(e)?v(e):window).visualViewport,e=!O()&&o,o=(r.left+(e&&t?t.offsetLeft:0))/n,e=(r.top+(e&&t?t.offsetTop:0))/i,t=r.width/n,n=r.height/i;return{width:t,height:n,top:e,right:o+t,bottom:e+n,left:o,x:o,y:e}}function f(e){e=v(e);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}function u(e){return e?(e.nodeName||"").toLowerCase():null}function w(e){return((p(e)?e.ownerDocument:e.document)||window.document).documentElement}function h(e){return d(w(e)).left+f(e).scrollLeft}function S(e){return v(e).getComputedStyle(e)}function c(e){var e=S(e),t=e.overflow;return/auto|scroll|overlay|hidden/.test(t+e.overflowY+e.overflowX)}function E(e,t,o){void 0===o&&(o=!1);var r=l(t),n=l(t)&&(a=(n=t).getBoundingClientRect(),i=_(a.width)/n.offsetWidth||1,a=_(a.height)/n.offsetHeight||1,1!==i||1!==a),i=w(t),a=d(e,n,o),e={scrollLeft:0,scrollTop:0},s={x:0,y:0};return!r&&o||("body"===u(t)&&!c(i)||(e=(r=t)!==v(r)&&l(r)?{scrollLeft:r.scrollLeft,scrollTop:r.scrollTop}:f(r)),l(t)?((s=d(t,!0)).x+=t.clientLeft,s.y+=t.clientTop):i&&(s.x=h(i))),{x:a.left+e.scrollLeft-s.x,y:a.top+e.scrollTop-s.y,width:a.width,height:a.height}}function P(e){var t=d(e),o=e.offsetWidth,r=e.offsetHeight;return Math.abs(t.width-o)<=1&&(o=t.width),Math.abs(t.height-r)<=1&&(r=t.height),{x:e.offsetLeft,y:e.offsetTop,width:o,height:r}}function s(e){return"html"===u(e)?e:e.assignedSlot||e.parentNode||(i(e)?e.host:null)||w(e)}function g(e,t){void 0===t&&(t=[]);var o=function e(t){return 0<=["html","body","#document"].indexOf(u(t))?t.ownerDocument.body:l(t)&&c(t)?t:e(s(t))}(e),e=o===(null==(e=e.ownerDocument)?void 0:e.body),r=v(o),r=e?[r].concat(r.visualViewport||[],c(o)?o:[]):o,o=t.concat(r);return e?o:o.concat(g(s(r)))}function n(e){return l(e)&&"fixed"!==S(e).position?e.offsetParent:null}function C(e){for(var t,o=v(e),r=n(e);r&&(t=r,0<=["table","td","th"].indexOf(u(t)))&&"static"===S(r).position;)r=n(r);return(!r||"html"!==u(r)&&("body"!==u(r)||"static"!==S(r).position))&&(r||(e=>{var t=/firefox/i.test(a()),o=/Trident/i.test(a());if(!o||!l(e)||"fixed"!==S(e).position){var r=s(e);for(i(r)&&(r=r.host);l(r)&&["html","body"].indexOf(u(r))<0;){var n=S(r);if("none"!==n.transform||"none"!==n.perspective||"paint"===n.contain||-1!==["transform","perspective"].indexOf(n.willChange)||t&&"filter"===n.willChange||t&&n.filter&&"none"!==n.filter)return r;r=r.parentNode}}return null})(e))||o}var x="top",j="bottom",D="right",I="left",k="auto",R=[x,j,D,I],W="start",T="end",F="clippingParents",z="viewport",m="popper",U="reference",V=R.reduce(function(e,t){return e.concat([t+"-"+W,t+"-"+T])},[]),$=[].concat(R,[k]).reduce(function(e,t){return e.concat([t,t+"-"+W,t+"-"+T])},[]),Y=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function X(e){var o=new Map,r=new Set,n=[];return e.forEach(function(e){o.set(e.name,e)}),e.forEach(function(e){r.has(e.name)||!function t(e){r.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach(function(e){r.has(e)||(e=o.get(e))&&t(e)}),n.push(e)}(e)}),n}function K(e,t){var o=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(o&&i(o)){var r=t;do{if(r&&e.isSameNode(r))return!0}while(r=r.parentNode||r.host)}return!1}function y(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function Q(e,t,o){return t===z?y((n=o,a=v(r=e),s=w(r),a=a.visualViewport,l=s.clientWidth,s=s.clientHeight,c=u=0,a&&(l=a.width,s=a.height,(i=O())||!i&&"fixed"===n)&&(u=a.offsetLeft,c=a.offsetTop),{width:l,height:s,x:u+h(r),y:c})):p(t)?((n=d(i=t,!1,"fixed"===(n=o))).top=n.top+i.clientTop,n.left=n.left+i.clientLeft,n.bottom=n.top+i.clientHeight,n.right=n.left+i.clientWidth,n.width=i.clientWidth,n.height=i.clientHeight,n.x=n.left,n.y=n.top,n):y((a=w(e),l=w(a),s=f(a),u=null==(u=a.ownerDocument)?void 0:u.body,r=L(l.scrollWidth,l.clientWidth,u?u.scrollWidth:0,u?u.clientWidth:0),c=L(l.scrollHeight,l.clientHeight,u?u.scrollHeight:0,u?u.clientHeight:0),a=-s.scrollLeft+h(a),s=-s.scrollTop,"rtl"===S(u||l).direction&&(a+=L(l.clientWidth,u?u.clientWidth:0)-r),{width:r,height:c,x:a,y:s}));var r,n,i,a,s,l,u,c}function J(o,e,t,r){var n,i="clippingParents"===e?(a=g(s(i=o)),p(n=0<=["absolute","fixed"].indexOf(S(i).position)&&l(i)?C(i):i)?a.filter(function(e){return p(e)&&K(e,n)&&"body"!==u(e)}):[]):[].concat(e),a=[].concat(i,[t]),e=a[0],t=a.reduce(function(e,t){t=Q(o,t,r);return e.top=L(t.top,e.top),e.right=A(t.right,e.right),e.bottom=A(t.bottom,e.bottom),e.left=L(t.left,e.left),e},Q(o,e,r));return t.width=t.right-t.left,t.height=t.bottom-t.top,t.x=t.left,t.y=t.top,t}function B(e){return e.split("-")[0]}function M(e){return e.split("-")[1]}function G(e){return 0<=["top","bottom"].indexOf(e)?"x":"y"}function Z(e){var t,o=e.reference,r=e.element,e=e.placement,n=e?B(e):null,e=e?M(e):null,i=o.x+o.width/2-r.width/2,a=o.y+o.height/2-r.height/2;switch(n){case x:t={x:i,y:o.y-r.height};break;case j:t={x:i,y:o.y+o.height};break;case D:t={x:o.x+o.width,y:a};break;case I:t={x:o.x-r.width,y:a};break;default:t={x:o.x,y:o.y}}var s=n?G(n):null;if(null!=s){var l="y"===s?"height":"width";switch(e){case W:t[s]=t[s]-(o[l]/2-r[l]/2);break;case T:t[s]=t[s]+(o[l]/2-r[l]/2)}}return t}function ee(){return{top:0,right:0,bottom:0,left:0}}function te(e){return Object.assign({},ee(),e)}function oe(o,e){return e.reduce(function(e,t){return e[t]=o,e},{})}function N(e,t){var r,t=t=void 0===t?{}:t,o=t.placement,o=void 0===o?e.placement:o,n=t.strategy,n=void 0===n?e.strategy:n,i=t.boundary,i=void 0===i?F:i,a=t.rootBoundary,a=void 0===a?z:a,s=t.elementContext,s=void 0===s?m:s,l=t.altBoundary,l=void 0!==l&&l,t=t.padding,t=void 0===t?0:t,t=te("number"!=typeof t?t:oe(t,R)),u=e.rects.popper,l=e.elements[l?s===m?U:m:s],l=J(p(l)?l:l.contextElement||w(e.elements.popper),i,a,n),i=d(e.elements.reference),a=Z({reference:i,element:u,strategy:"absolute",placement:o}),n=y(Object.assign({},u,a)),u=s===m?n:i,c={top:l.top-u.top+t.top,bottom:u.bottom-l.bottom+t.bottom,left:l.left-u.left+t.left,right:u.right-l.right+t.right},a=e.modifiersData.offset;return s===m&&a&&(r=a[o],Object.keys(c).forEach(function(e){var t=0<=[D,j].indexOf(e)?1:-1,o=0<=[x,j].indexOf(e)?"y":"x";c[e]+=r[o]*t})),c}var re={placement:"bottom",modifiers:[],strategy:"absolute"};function ne(){for(var e=arguments.length,t=new Array(e),o=0;o<e;o++)t[o]=arguments[o];return!t.some(function(e){return!(e&&"function"==typeof e.getBoundingClientRect)})}function r(e){var e=e=void 0===e?{}:e,t=e.defaultModifiers,d=void 0===t?[]:t,t=e.defaultOptions,f=void 0===t?re:t;return function(r,n,t){void 0===t&&(t=f);var o,i,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},re,f),modifiersData:{},elements:{reference:r,popper:n},attributes:{},styles:{}},s=[],l=!1,u={state:a,setOptions:function(e){var o,t,e="function"==typeof e?e(a.options):e,e=(c(),a.options=Object.assign({},f,a.options,e),a.scrollParents={reference:p(r)?g(r):r.contextElement?g(r.contextElement):[],popper:g(n)},e=[].concat(d,a.options.modifiers),t=e.reduce(function(e,t){var o=e[t.name];return e[t.name]=o?Object.assign({},o,t,{options:Object.assign({},o.options,t.options),data:Object.assign({},o.data,t.data)}):t,e},{}),e=Object.keys(t).map(function(e){return t[e]}),o=X(e),Y.reduce(function(e,t){return e.concat(o.filter(function(e){return e.phase===t}))},[]));return a.orderedModifiers=e.filter(function(e){return e.enabled}),a.orderedModifiers.forEach(function(e){var t=e.name,o=e.options,e=e.effect;"function"==typeof e&&(e=e({state:a,name:t,instance:u,options:void 0===o?{}:o}),s.push(e||function(){}))}),u.update()},forceUpdate:function(){if(!l){var e=a.elements,t=e.reference,e=e.popper;if(ne(t,e)){a.rects={reference:E(t,C(e),"fixed"===a.options.strategy),popper:P(e)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach(function(e){return a.modifiersData[e.name]=Object.assign({},e.data)});for(var o,r,n,i=0;i<a.orderedModifiers.length;i++)!0===a.reset?(a.reset=!1,i=-1):(r=(o=a.orderedModifiers[i]).fn,n=o.options,"function"==typeof r&&(a=r({state:a,options:void 0===n?{}:n,name:o.name,instance:u})||a))}}},update:(o=function(){return new Promise(function(e){u.forceUpdate(),e(a)})},function(){return i=i||new Promise(function(e){Promise.resolve().then(function(){i=void 0,e(o())})})}),destroy:function(){c(),l=!0}};return ne(r,n)&&u.setOptions(t).then(function(e){!l&&t.onFirstUpdate&&t.onFirstUpdate(e)}),u;function c(){s.forEach(function(e){return e()}),s=[]}}}var b={passive:!0};var ie={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,o=e.instance,r=(e=e.options).scroll,n=void 0===r||r,i=void 0===(r=e.resize)||r,a=v(t.elements.popper),s=[].concat(t.scrollParents.reference,t.scrollParents.popper);return n&&s.forEach(function(e){e.addEventListener("scroll",o.update,b)}),i&&a.addEventListener("resize",o.update,b),function(){n&&s.forEach(function(e){e.removeEventListener("scroll",o.update,b)}),i&&a.removeEventListener("resize",o.update,b)}},data:{}};var ae={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state;t.modifiersData[e.name]=Z({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},se={top:"auto",right:"auto",bottom:"auto",left:"auto"};function le(e){var t,o=e.popper,r=e.popperRect,n=e.placement,i=e.variation,a=e.offsets,s=e.position,l=e.gpuAcceleration,u=e.adaptive,c=e.roundOffsets,e=e.isFixed,d=a.x,d=void 0===d?0:d,f=a.y,f=void 0===f?0:f,p="function"==typeof c?c({x:d,y:f}):{x:d,y:f},p=(d=p.x,f=p.y,a.hasOwnProperty("x")),a=a.hasOwnProperty("y"),h=I,g=x,m=window,y=(u&&(y="clientHeight",t="clientWidth",(b=C(o))===v(o)&&"static"!==S(b=w(o)).position&&"absolute"===s&&(y="scrollHeight",t="scrollWidth"),n!==x&&(n!==I&&n!==D||i!==T)||(g=j,f=(f-((e&&b===m&&m.visualViewport?m.visualViewport.height:b[y])-r.height))*(l?1:-1)),n!==I&&(n!==x&&n!==j||i!==T)||(h=D,d=(d-((e&&b===m&&m.visualViewport?m.visualViewport.width:b[t])-r.width))*(l?1:-1))),Object.assign({position:s},u&&se)),b=!0===c?(n={x:d,y:f},i=v(o),e=n.x,n=n.y,i=i.devicePixelRatio||1,{x:_(e*i)/i||0,y:_(n*i)/i||0}):{x:d,y:f};return d=b.x,f=b.y,l?Object.assign({},y,((t={})[g]=a?"0":"",t[h]=p?"0":"",t.transform=(m.devicePixelRatio||1)<=1?"translate("+d+"px, "+f+"px)":"translate3d("+d+"px, "+f+"px, 0)",t)):Object.assign({},y,((r={})[g]=a?f+"px":"",r[h]=p?d+"px":"",r.transform="",r))}var ue={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,o=void 0===(o=(e=e.options).gpuAcceleration)||o,r=void 0===(r=e.adaptive)||r,e=void 0===(e=e.roundOffsets)||e,o={placement:B(t.placement),variation:M(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:o,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,le(Object.assign({},o,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:r,roundOffsets:e})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,le(Object.assign({},o,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:e})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}};var ce={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var n=e.state;Object.keys(n.elements).forEach(function(e){var t=n.styles[e]||{},o=n.attributes[e]||{},r=n.elements[e];l(r)&&u(r)&&(Object.assign(r.style,t),Object.keys(o).forEach(function(e){var t=o[e];!1===t?r.removeAttribute(e):r.setAttribute(e,!0===t?"":t)}))})},effect:function(e){var r=e.state,n={popper:{position:r.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(r.elements.popper.style,n.popper),r.styles=n,r.elements.arrow&&Object.assign(r.elements.arrow.style,n.arrow),function(){Object.keys(r.elements).forEach(function(e){var t=r.elements[e],o=r.attributes[e]||{},e=Object.keys((r.styles.hasOwnProperty(e)?r.styles:n)[e]).reduce(function(e,t){return e[t]="",e},{});l(t)&&u(t)&&(Object.assign(t.style,e),Object.keys(o).forEach(function(e){t.removeAttribute(e)}))})}},requires:["computeStyles"]};var de={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var a=e.state,t=e.name,s=void 0===(e=e.options.offset)?[0,0]:e,e=$.reduce(function(e,t){var o,r,n,i;return e[t]=(t=t,o=a.rects,r=s,n=B(t),i=0<=[I,x].indexOf(n)?-1:1,t=(o="function"==typeof r?r(Object.assign({},o,{placement:t})):r)[0]||0,r=(o[1]||0)*i,0<=[I,D].indexOf(n)?{x:r,y:t}:{x:t,y:r}),e},{}),o=(r=e[a.placement]).x,r=r.y;null!=a.modifiersData.popperOffsets&&(a.modifiersData.popperOffsets.x+=o,a.modifiersData.popperOffsets.y+=r),a.modifiersData[t]=e}},fe={left:"right",right:"left",bottom:"top",top:"bottom"};function q(e){return e.replace(/left|right|bottom|top/g,function(e){return fe[e]})}var pe={start:"end",end:"start"};function he(e){return e.replace(/start|end/g,function(e){return pe[e]})}var ge={name:"flip",enabled:!0,phase:"main",fn:function(e){var d=e.state,t=e.options,e=e.name;if(!d.modifiersData[e]._skip){for(var o=t.mainAxis,r=void 0===o||o,o=t.altAxis,n=void 0===o||o,o=t.fallbackPlacements,f=t.padding,p=t.boundary,h=t.rootBoundary,i=t.altBoundary,a=t.flipVariations,g=void 0===a||a,m=t.allowedAutoPlacements,a=d.options.placement,t=B(a),o=o||(t===a||!g?[q(a)]:B(o=a)===k?[]:(t=q(o),[he(o),t,he(t)])),s=[a].concat(o).reduce(function(e,t){return e.concat(B(t)===k?(o=d,r=(e=e=void 0===(e={placement:t,boundary:p,rootBoundary:h,padding:f,flipVariations:g,allowedAutoPlacements:m})?{}:e).placement,n=e.boundary,i=e.rootBoundary,a=e.padding,s=e.flipVariations,l=void 0===(e=e.allowedAutoPlacements)?$:e,u=M(r),e=u?s?V:V.filter(function(e){return M(e)===u}):R,c=(r=0===(r=e.filter(function(e){return 0<=l.indexOf(e)})).length?e:r).reduce(function(e,t){return e[t]=N(o,{placement:t,boundary:n,rootBoundary:i,padding:a})[B(t)],e},{}),Object.keys(c).sort(function(e,t){return c[e]-c[t]})):t);var o,r,n,i,a,s,l,u,c},[]),l=d.rects.reference,u=d.rects.popper,c=new Map,y=!0,b=s[0],v=0;v<s.length;v++){var _=s[v],w=B(_),S=M(_)===W,T=0<=[x,j].indexOf(w),O=T?"width":"height",E=N(d,{placement:_,boundary:p,rootBoundary:h,altBoundary:i,padding:f}),T=T?S?D:I:S?j:x,S=(l[O]>u[O]&&(T=q(T)),q(T)),O=[];if(r&&O.push(E[w]<=0),n&&O.push(E[T]<=0,E[S]<=0),O.every(function(e){return e})){b=_,y=!1;break}c.set(_,O)}if(y)for(var L=g?3:1;0<L;L--)if("break"===(t=>{var e=s.find(function(e){e=c.get(e);if(e)return e.slice(0,t).every(function(e){return e})});if(e)return b=e,"break"})(L))break;d.placement!==b&&(d.modifiersData[e]._skip=!0,d.placement=b,d.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function H(e,t,o){return L(e,A(t,o))}var me={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t,o,r,n,i,a,s,l,u,c=e.state,d=e.options,e=e.name,f=void 0===(f=d.mainAxis)||f,p=void 0!==(p=d.altAxis)&&p,h=void 0===(h=d.tether)||h,g=void 0===(g=d.tetherOffset)?0:g,d=N(c,{boundary:d.boundary,rootBoundary:d.rootBoundary,padding:d.padding,altBoundary:d.altBoundary}),m=B(c.placement),y=M(c.placement),b=!y,v=G(m),_="x"===v?"y":"x",w=c.modifiersData.popperOffsets,S=c.rects.reference,T=c.rects.popper,g="number"==typeof(g="function"==typeof g?g(Object.assign({},c.rects,{placement:c.placement})):g)?{mainAxis:g,altAxis:g}:Object.assign({mainAxis:0,altAxis:0},g),O=c.modifiersData.offset?c.modifiersData.offset[c.placement]:null,E={x:0,y:0};w&&(f&&(f="y"===v?"height":"width",a=(s=w[v])+d[o="y"===v?x:I],l=s-d[u="y"===v?j:D],t=h?-T[f]/2:0,n=(y===W?S:T)[f],y=y===W?-T[f]:-S[f],i=c.elements.arrow,i=h&&i?P(i):{width:0,height:0},o=(r=c.modifiersData["arrow#persistent"]?c.modifiersData["arrow#persistent"].padding:ee())[o],r=r[u],u=H(0,S[f],i[f]),i=b?S[f]/2-t-u-o-g.mainAxis:n-u-o-g.mainAxis,n=b?-S[f]/2+t+u+r+g.mainAxis:y+u+r+g.mainAxis,b=(o=c.elements.arrow&&C(c.elements.arrow))?"y"===v?o.clientTop||0:o.clientLeft||0:0,y=s+n-(t=null!=(f=null==O?void 0:O[v])?f:0),u=H(h?A(a,s+i-t-b):a,s,h?L(l,y):l),w[v]=u,E[v]=u-s),p&&(r="y"==_?"height":"width",n=(o=w[_])+d["x"===v?x:I],f=o-d["x"===v?j:D],i=-1!==[x,I].indexOf(m),b=null!=(t=null==O?void 0:O[_])?t:0,a=i?n:o-S[r]-T[r]-b+g.altAxis,y=i?o+S[r]+T[r]-b-g.altAxis:f,s=h&&i?(l=H(l=a,o,u=y),u<l?u:l):H(h?a:n,o,h?y:f),w[_]=s,E[_]=s-o),c.modifiersData[e]=E)},requiresIfExists:["offset"]};var ye={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,o,r,n,i=e.state,a=e.name,e=e.options,s=i.elements.arrow,l=i.modifiersData.popperOffsets,u=G(c=B(i.placement)),c=0<=[I,D].indexOf(c)?"height":"width";s&&l&&(e=e.padding,o=i,o=te("number"!=typeof(e="function"==typeof e?e(Object.assign({},o.rects,{placement:o.placement})):e)?e:oe(e,R)),e=P(s),n="y"===u?x:I,r="y"===u?j:D,t=i.rects.reference[c]+i.rects.reference[u]-l[u]-i.rects.popper[c],l=l[u]-i.rects.reference[u],s=(s=C(s))?"y"===u?s.clientHeight||0:s.clientWidth||0:0,n=o[n],o=s-e[c]-o[r],n=H(n,r=s/2-e[c]/2+(t/2-l/2),o),i.modifiersData[a]=((s={})[u]=n,s.centerOffset=n-r,s))},effect:function(e){var t=e.state;null!=(e=void 0===(e=e.options.element)?"[data-popper-arrow]":e)&&("string"!=typeof e||(e=t.elements.popper.querySelector(e)))&&K(t.elements.popper,e)&&(t.elements.arrow=e)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function be(e,t,o){return{top:e.top-t.height-(o=void 0===o?{x:0,y:0}:o).y,right:e.right-t.width+o.x,bottom:e.bottom-t.height+o.y,left:e.left-t.width-o.x}}function ve(t){return[x,D,j,I].some(function(e){return 0<=t[e]})}var _e={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,e=e.name,o=t.rects.reference,r=t.rects.popper,n=t.modifiersData.preventOverflow,i=N(t,{elementContext:"reference"}),a=N(t,{altBoundary:!0}),i=be(i,o),o=be(a,r,n),a=ve(i),r=ve(o);t.modifiersData[e]={referenceClippingOffsets:i,popperEscapeOffsets:o,isReferenceHidden:a,hasPopperEscaped:r},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":a,"data-popper-escaped":r})}},we=r({defaultModifiers:[ie,ae,ue,ce]}),Se=[ie,ae,ue,ce,de,ge,me,ye,_e],Te=r({defaultModifiers:Se});e.applyStyles=ce,e.arrow=ye,e.computeStyles=ue,e.createPopper=Te,e.createPopperLite=we,e.defaultModifiers=Se,e.detectOverflow=N,e.eventListeners=ie,e.flip=ge,e.hide=_e,e.offset=de,e.popperGenerator=r,e.popperOffsets=ae,e.preventOverflow=me},{}],2:[function(e,t,o){var r,n;r=this,n=function(e){function W(t){var o,r=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(t)for(let e in t)"default"!==e&&(o=Object.getOwnPropertyDescriptor(t,e),Object.defineProperty(r,e,o.get?o:{enumerable:!0,get:()=>t[e]}));return r.default=t,Object.freeze(r)}let o=W(e),r=new Map,B={set(e,t,o){r.has(e)||r.set(e,new Map);e=r.get(e);e.has(t)||0===e.size?e.set(t,o):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(e.keys())[0]}.`)},get(e,t){return r.has(e)&&r.get(e).get(t)||null},remove(e,t){var o;r.has(e)&&((o=r.get(e)).delete(t),0===o.size)&&r.delete(e)}},M=1e3,N="transitionend",q=e=>e=e&&window.CSS&&window.CSS.escape?e.replace(/#([^\s"#']+)/g,(e,t)=>"#"+CSS.escape(t)):e,H=e=>{e.dispatchEvent(new Event(N))},i=e=>!(!e||"object"!=typeof e)&&void 0!==(e=void 0!==e.jquery?e[0]:e).nodeType,n=e=>i(e)?e.jquery?e[0]:e:"string"==typeof e&&0<e.length?document.querySelector(q(e)):null,a=e=>{if(!i(e)||0===e.getClientRects().length)return!1;var t="visible"===getComputedStyle(e).getPropertyValue("visibility"),o=e.closest("details:not([open])");if(o&&o!==e){e=e.closest("summary");if(e&&e.parentNode!==o)return!1;if(null===e)return!1}return t},s=e=>!e||e.nodeType!==Node.ELEMENT_NODE||!!e.classList.contains("disabled")||(void 0!==e.disabled?e.disabled:e.hasAttribute("disabled")&&"false"!==e.getAttribute("disabled")),F=e=>{var t;return document.documentElement.attachShadow?"function"==typeof e.getRootNode?(t=e.getRootNode())instanceof ShadowRoot?t:null:e instanceof ShadowRoot?e:e.parentNode?F(e.parentNode):null:null},l=()=>{},u=e=>{e.offsetHeight},z=()=>window.jQuery&&!document.body.hasAttribute("data-bs-no-jquery")?window.jQuery:null,U=[],c=()=>"rtl"===document.documentElement.dir;e=r=>{var e;e=()=>{let o=z();if(o){let e=r.NAME,t=o.fn[e];o.fn[e]=r.jQueryInterface,o.fn[e].Constructor=r,o.fn[e].noConflict=()=>(o.fn[e]=t,r.jQueryInterface)}},"loading"===document.readyState?(U.length||document.addEventListener("DOMContentLoaded",()=>{for(var e of U)e()}),U.push(e)):e()};let d=(e,t=[],o=e)=>"function"==typeof e?e(...t):o,V=(r,n,e=!0)=>{if(e){e=(e=>{if(!e)return 0;let{transitionDuration:t,transitionDelay:o}=window.getComputedStyle(e);var e=Number.parseFloat(t),r=Number.parseFloat(o);return e||r?(t=t.split(",")[0],o=o.split(",")[0],(Number.parseFloat(t)+Number.parseFloat(o))*M):0})(n)+5;let t=!1,o=({target:e})=>{e===n&&(t=!0,n.removeEventListener(N,o),d(r))};n.addEventListener(N,o),setTimeout(()=>{t||H(n)},e)}else d(r)},$=(e,t,o,r)=>{var n=e.length;let i=e.indexOf(t);return-1===i?!o&&r?e[n-1]:e[0]:(i+=o?1:-1,r&&(i=(i+n)%n),e[Math.max(0,Math.min(i,n-1))])},Y=/[^.]*(?=\..*)\.|.*/,X=/\..*/,K=/::\d+$/,Q={},J=1,G={mouseenter:"mouseover",mouseleave:"mouseout"},Z=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function ee(e,t){return t&&t+"::"+J++||e.uidEvent||J++}function te(e){var t=ee(e);return e.uidEvent=t,Q[t]=Q[t]||{},Q[t]}function oe(e,t,o=null){return Object.values(e).find(e=>e.callable===t&&e.delegationSelector===o)}function re(e,t,o){var r="string"==typeof t,t=!r&&t||o;let n=ae(e);return[r,t,n=Z.has(n)?n:e]}function ne(r,n,i,a,s){if("string"==typeof n&&r){let[e,t,o]=re(n,i,a);n in G&&(t=(l=t,function(e){if(!e.relatedTarget||e.relatedTarget!==e.delegateTarget&&!e.delegateTarget.contains(e.relatedTarget))return l.call(this,e)}));var l,u,c,d,f,p,a=te(r),a=a[o]||(a[o]={}),h=oe(a,t,e?i:null);h?h.oneOff=h.oneOff&&s:(h=ee(t,n.replace(Y,"")),(n=e?(d=r,f=i,p=t,function t(o){var r=d.querySelectorAll(f);for(let e=o.target;e&&e!==this;e=e.parentNode)for(var n of r)if(n===e)return se(o,{delegateTarget:e}),t.oneOff&&g.off(d,o.type,f,p),p.apply(e,[o])}):(u=r,c=t,function e(t){return se(t,{delegateTarget:u}),e.oneOff&&g.off(u,t.type,c),c.apply(u,[t])})).delegationSelector=e?i:null,n.callable=t,n.oneOff=s,a[n.uidEvent=h]=n,r.addEventListener(o,n,e))}}function ie(e,t,o,r,n){r=oe(t[o],r,n);r&&(e.removeEventListener(o,r,Boolean(n)),delete t[o][r.uidEvent])}function ae(e){return e=e.replace(X,""),G[e]||e}let g={on(e,t,o,r){ne(e,t,o,r,!1)},one(e,t,o,r){ne(e,t,o,r,!0)},off(e,t,o,r){if("string"==typeof t&&e){var n,i,[r,a,s]=re(t,o,r),l=s!==t,u=te(e),c=u[s]||{},d=t.startsWith(".");if(void 0!==a)return Object.keys(c).length?void ie(e,u,s,a,r?o:null):void 0;if(d)for(var f of Object.keys(u)){h=p=v=b=y=m=g=void 0;var p,h,g=e,m=u,y=f,b=t.slice(1),v=m[y]||{};for([p,h]of Object.entries(v))p.includes(b)&&ie(g,m,y,h.callable,h.delegationSelector)}for([n,i]of Object.entries(c)){var _=n.replace(K,"");l&&!t.includes(_)||ie(e,u,s,i.callable,i.delegationSelector)}}},trigger(e,t,o){if("string"!=typeof t||!e)return null;var r=z();let n=null,i=!0,a=!0,s=!1;t!==ae(t)&&r&&(n=r.Event(t,o),r(e).trigger(n),i=!n.isPropagationStopped(),a=!n.isImmediatePropagationStopped(),s=n.isDefaultPrevented());r=se(new Event(t,{bubbles:i,cancelable:!0}),o);return s&&r.preventDefault(),a&&e.dispatchEvent(r),r.defaultPrevented&&n&&n.preventDefault(),r}};function se(r,e={}){for(let[t,o]of Object.entries(e))try{r[t]=o}catch(e){Object.defineProperty(r,t,{configurable:!0,get(){return o}})}return r}function le(t){if("true"===t)return!0;if("false"===t)return!1;if(t===Number(t).toString())return Number(t);if(""===t||"null"===t)return null;if("string"!=typeof t)return t;try{return JSON.parse(decodeURIComponent(t))}catch(e){return t}}function ue(e){return e.replace(/[A-Z]/g,e=>"-"+e.toLowerCase())}let f={setDataAttribute(e,t,o){e.setAttribute("data-bs-"+ue(t),o)},removeDataAttribute(e,t){e.removeAttribute("data-bs-"+ue(t))},getDataAttributes(t){if(!t)return{};var o,r={};for(o of Object.keys(t.dataset).filter(e=>e.startsWith("bs")&&!e.startsWith("bsConfig"))){let e=o.replace(/^bs/,"");r[e=e.charAt(0).toLowerCase()+e.slice(1,e.length)]=le(t.dataset[o])}return r},getDataAttribute(e,t){return le(e.getAttribute("data-bs-"+ue(t)))}};class t{static get Default(){return{}}static get DefaultType(){return{}}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}_getConfig(e){return e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e}_mergeConfigObj(e,t){var o=i(t)?f.getDataAttribute(t,"config"):{};return{...this.constructor.Default,..."object"==typeof o?o:{},...i(t)?f.getDataAttributes(t):{},..."object"==typeof e?e:{}}}_typeCheckConfig(e,t=this.constructor.DefaultType){for(var[o,r]of Object.entries(t)){var n=e[o],n=i(n)?"element":null==(n=n)?""+n:Object.prototype.toString.call(n).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(r).test(n))throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${o}" provided type "${n}" but expected type "${r}".`)}}}class p extends t{constructor(e,t){super(),(e=n(e))&&(this._element=e,this._config=this._getConfig(t),B.set(this._element,this.constructor.DATA_KEY,this))}dispose(){B.remove(this._element,this.constructor.DATA_KEY),g.off(this._element,this.constructor.EVENT_KEY);for(var e of Object.getOwnPropertyNames(this))this[e]=null}_queueCallback(e,t,o=!0){V(e,t,o)}_getConfig(e){return e=this._mergeConfigObj(e,this._element),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}static getInstance(e){return B.get(n(e),this.DATA_KEY)}static getOrCreateInstance(e,t={}){return this.getInstance(e)||new this(e,"object"==typeof t?t:null)}static get VERSION(){return"5.3.3"}static get DATA_KEY(){return"bs."+this.NAME}static get EVENT_KEY(){return"."+this.DATA_KEY}static eventName(e){return""+e+this.EVENT_KEY}}let ce=t=>{let o=t.getAttribute("data-bs-target");if(!o||"#"===o){let e=t.getAttribute("href");if(!e||!e.includes("#")&&!e.startsWith("."))return null;e.includes("#")&&!e.startsWith("#")&&(e="#"+e.split("#")[1]),o=e&&"#"!==e?e.trim():null}return o?o.split(",").map(e=>q(e)).join(","):null},h={find(e,t=document.documentElement){return[].concat(...Element.prototype.querySelectorAll.call(t,e))},findOne(e,t=document.documentElement){return Element.prototype.querySelector.call(t,e)},children(e,t){return[].concat(...e.children).filter(e=>e.matches(t))},parents(e,t){var o=[];let r=e.parentNode.closest(t);for(;r;)o.push(r),r=r.parentNode.closest(t);return o},prev(e,t){let o=e.previousElementSibling;for(;o;){if(o.matches(t))return[o];o=o.previousElementSibling}return[]},next(e,t){let o=e.nextElementSibling;for(;o;){if(o.matches(t))return[o];o=o.nextElementSibling}return[]},focusableChildren(e){var t=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map(e=>e+':not([tabindex^="-"])').join(",");return this.find(t,e).filter(e=>!s(e)&&a(e))},getSelectorFromElement(e){e=ce(e);return e&&h.findOne(e)?e:null},getElementFromSelector(e){e=ce(e);return e?h.findOne(e):null},getMultipleElementsFromSelector(e){e=ce(e);return e?h.find(e):[]}};var de=(t,o="hide")=>{var e="click.dismiss"+t.EVENT_KEY;let r=t.NAME;g.on(document,e,`[data-bs-dismiss="${r}"]`,function(e){["A","AREA"].includes(this.tagName)&&e.preventDefault(),s(this)||(e=h.getElementFromSelector(this)||this.closest("."+r),t.getOrCreateInstance(e)[o]())})};class fe extends p{static get NAME(){return"alert"}close(){var e;g.trigger(this._element,"close.bs.alert").defaultPrevented||(this._element.classList.remove("show"),e=this._element.classList.contains("fade"),this._queueCallback(()=>this._destroyElement(),this._element,e))}_destroyElement(){this._element.remove(),g.trigger(this._element,"closed.bs.alert"),this.dispose()}static jQueryInterface(t){return this.each(function(){var e=fe.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}})}}de(fe,"close"),e(fe);let pe='[data-bs-toggle="button"]';class he extends p{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(t){return this.each(function(){var e=he.getOrCreateInstance(this);"toggle"===t&&e[t]()})}}g.on(document,"click.bs.button.data-api",pe,e=>{e.preventDefault();e=e.target.closest(pe);he.getOrCreateInstance(e).toggle()}),e(he);let m=".bs.swipe",ge=(m,m,m,m,m,{endCallback:null,leftCallback:null,rightCallback:null}),me={endCallback:"(function|null)",leftCallback:"(function|null)",rightCallback:"(function|null)"};class ye extends t{constructor(e,t){super(),(this._element=e)&&ye.isSupported()&&(this._config=this._getConfig(t),this._deltaX=0,this._supportPointerEvents=Boolean(window.PointerEvent),this._initEvents())}static get Default(){return ge}static get DefaultType(){return me}static get NAME(){return"swipe"}dispose(){g.off(this._element,m)}_start(e){this._supportPointerEvents?this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX):this._deltaX=e.touches[0].clientX}_end(e){this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX-this._deltaX),this._handleSwipe(),d(this._config.endCallback)}_move(e){this._deltaX=e.touches&&1<e.touches.length?0:e.touches[0].clientX-this._deltaX}_handleSwipe(){var e=Math.abs(this._deltaX);e<=40||(e=e/this._deltaX,this._deltaX=0,e&&d(0<e?this._config.rightCallback:this._config.leftCallback))}_initEvents(){this._supportPointerEvents?(g.on(this._element,"pointerdown.bs.swipe",e=>this._start(e)),g.on(this._element,"pointerup.bs.swipe",e=>this._end(e)),this._element.classList.add("pointer-event")):(g.on(this._element,"touchstart.bs.swipe",e=>this._start(e)),g.on(this._element,"touchmove.bs.swipe",e=>this._move(e)),g.on(this._element,"touchend.bs.swipe",e=>this._end(e)))}_eventIsPointerPenTouch(e){return this._supportPointerEvents&&("pen"===e.pointerType||"touch"===e.pointerType)}static isSupported(){return"ontouchstart"in document.documentElement||0<navigator.maxTouchPoints}}var y=".bs.carousel";let b="next",v="prev",_="left",be="right",ve="slid"+y;let _e="carousel",we="active",Se=".active",Te=".carousel-item";Se,Te;let Oe={ArrowLeft:be,ArrowRight:_},Ee={interval:5e3,keyboard:!0,pause:"hover",ride:!1,touch:!0,wrap:!0},Le={interval:"(number|boolean)",keyboard:"boolean",pause:"(string|boolean)",ride:"(boolean|string)",touch:"boolean",wrap:"boolean"};class w extends p{constructor(e,t){super(e,t),this._interval=null,this._activeElement=null,this._isSliding=!1,this.touchTimeout=null,this._swipeHelper=null,this._indicatorsElement=h.findOne(".carousel-indicators",this._element),this._addEventListeners(),this._config.ride===_e&&this.cycle()}static get Default(){return Ee}static get DefaultType(){return Le}static get NAME(){return"carousel"}next(){this._slide(b)}nextWhenVisible(){!document.hidden&&a(this._element)&&this.next()}prev(){this._slide(v)}pause(){this._isSliding&&H(this._element),this._clearInterval()}cycle(){this._clearInterval(),this._updateInterval(),this._interval=setInterval(()=>this.nextWhenVisible(),this._config.interval)}_maybeEnableCycle(){this._config.ride&&(this._isSliding?g.one(this._element,ve,()=>this.cycle()):this.cycle())}to(e){var t,o=this._getItems();e>o.length-1||e<0||(this._isSliding?g.one(this._element,ve,()=>this.to(e)):(t=this._getItemIndex(this._getActive()))!==e&&(t=t<e?b:v,this._slide(t,o[e])))}dispose(){this._swipeHelper&&this._swipeHelper.dispose(),super.dispose()}_configAfterMerge(e){return e.defaultInterval=e.interval,e}_addEventListeners(){this._config.keyboard&&g.on(this._element,"keydown.bs.carousel",e=>this._keydown(e)),"hover"===this._config.pause&&(g.on(this._element,"mouseenter.bs.carousel",()=>this.pause()),g.on(this._element,"mouseleave.bs.carousel",()=>this._maybeEnableCycle())),this._config.touch&&ye.isSupported()&&this._addTouchEventListeners()}_addTouchEventListeners(){for(var e of h.find(".carousel-item img",this._element))g.on(e,"dragstart.bs.carousel",e=>e.preventDefault());var t={leftCallback:()=>this._slide(this._directionToOrder(_)),rightCallback:()=>this._slide(this._directionToOrder(be)),endCallback:()=>{"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout(()=>this._maybeEnableCycle(),500+this._config.interval))}};this._swipeHelper=new ye(this._element,t)}_keydown(e){var t;/input|textarea/i.test(e.target.tagName)||(t=Oe[e.key])&&(e.preventDefault(),this._slide(this._directionToOrder(t)))}_getItemIndex(e){return this._getItems().indexOf(e)}_setActiveIndicatorElement(e){var t;this._indicatorsElement&&((t=h.findOne(Se,this._indicatorsElement)).classList.remove(we),t.removeAttribute("aria-current"),t=h.findOne(`[data-bs-slide-to="${e}"]`,this._indicatorsElement))&&(t.classList.add(we),t.setAttribute("aria-current","true"))}_updateInterval(){var e=this._activeElement||this._getActive();e&&(e=Number.parseInt(e.getAttribute("data-bs-interval"),10),this._config.interval=e||this._config.defaultInterval)}_slide(t,a=null){if(!this._isSliding){let n=this._getActive();var s=t===b;let i=a||$(this._getItems(),n,s,this._config.wrap);if(i!==n){let o=this._getItemIndex(i),r=e=>g.trigger(this._element,e,{relatedTarget:i,direction:this._orderToDirection(t),from:this._getItemIndex(n),to:o});a=r("slide.bs.carousel");if(!a.defaultPrevented&&n&&i){a=Boolean(this._interval);this.pause(),this._isSliding=!0,this._setActiveIndicatorElement(o),this._activeElement=i;let e=s?"carousel-item-start":"carousel-item-end",t=s?"carousel-item-next":"carousel-item-prev";i.classList.add(t),u(i),n.classList.add(e),i.classList.add(e);this._queueCallback(()=>{i.classList.remove(e,t),i.classList.add(we),n.classList.remove(we,t,e),this._isSliding=!1,r(ve)},n,this._isAnimated()),a&&this.cycle()}}}}_isAnimated(){return this._element.classList.contains("slide")}_getActive(){return h.findOne(".active.carousel-item",this._element)}_getItems(){return h.find(Te,this._element)}_clearInterval(){this._interval&&(clearInterval(this._interval),this._interval=null)}_directionToOrder(e){return c()?e===_?v:b:e===_?b:v}_orderToDirection(e){return c()?e===v?_:be:e===v?be:_}static jQueryInterface(t){return this.each(function(){var e=w.getOrCreateInstance(this,t);if("number"==typeof t)e.to(t);else if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t]()}})}}g.on(document,"click.bs.carousel.data-api","[data-bs-slide], [data-bs-slide-to]",function(e){var t=h.getElementFromSelector(this);t&&t.classList.contains(_e)&&(e.preventDefault(),e=w.getOrCreateInstance(t),(t=this.getAttribute("data-bs-slide-to"))?e.to(t):"next"===f.getDataAttribute(this,"slide")?e.next():e.prev(),e._maybeEnableCycle())}),g.on(window,"load.bs.carousel.data-api",()=>{var e;for(e of h.find('[data-bs-ride="carousel"]'))w.getOrCreateInstance(e)}),e(w);let Ae="show",S="collapse",Pe="collapsing",Ce=(S,S,'[data-bs-toggle="collapse"]'),xe={parent:null,toggle:!0},je={parent:"(null|element)",toggle:"boolean"};class T extends p{constructor(e,t){var o;super(e,t),this._isTransitioning=!1,this._triggerArray=[];for(o of h.find(Ce)){var r=h.getSelectorFromElement(o),n=h.find(r).filter(e=>e===this._element);null!==r&&n.length&&this._triggerArray.push(o)}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return xe}static get DefaultType(){return je}static get NAME(){return"collapse"}toggle(){this._isShown()?this.hide():this.show()}show(){if(!this._isTransitioning&&!this._isShown()){let t=[];if(!(t=this._config.parent?this._getFirstLevelChildren(".collapse.show, .collapse.collapsing").filter(e=>e!==this._element).map(e=>T.getOrCreateInstance(e,{toggle:!1})):t).length||!t[0]._isTransitioning){var o=g.trigger(this._element,"show.bs.collapse");if(!o.defaultPrevented){for(var r of t)r.hide();let e=this._getDimension();this._element.classList.remove(S),this._element.classList.add(Pe),this._element.style[e]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;o="scroll"+(e[0].toUpperCase()+e.slice(1));this._queueCallback(()=>{this._isTransitioning=!1,this._element.classList.remove(Pe),this._element.classList.add(S,Ae),this._element.style[e]="",g.trigger(this._element,"shown.bs.collapse")},this._element,!0),this._element.style[e]=this._element[o]+"px"}}}}hide(){if(!this._isTransitioning&&this._isShown()){var e=g.trigger(this._element,"hide.bs.collapse");if(!e.defaultPrevented){var t,e=this._getDimension();this._element.style[e]=this._element.getBoundingClientRect()[e]+"px",u(this._element),this._element.classList.add(Pe),this._element.classList.remove(S,Ae);for(t of this._triggerArray){var o=h.getElementFromSelector(t);o&&!this._isShown(o)&&this._addAriaAndCollapsedClass([t],!1)}this._isTransitioning=!0;this._element.style[e]="",this._queueCallback(()=>{this._isTransitioning=!1,this._element.classList.remove(Pe),this._element.classList.add(S),g.trigger(this._element,"hidden.bs.collapse")},this._element,!0)}}}_isShown(e=this._element){return e.classList.contains(Ae)}_configAfterMerge(e){return e.toggle=Boolean(e.toggle),e.parent=n(e.parent),e}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){var e;if(this._config.parent)for(e of this._getFirstLevelChildren(Ce)){var t=h.getElementFromSelector(e);t&&this._addAriaAndCollapsedClass([e],this._isShown(t))}}_getFirstLevelChildren(e){let t=h.find(":scope .collapse .collapse",this._config.parent);return h.find(e,this._config.parent).filter(e=>!t.includes(e))}_addAriaAndCollapsedClass(e,t){if(e.length)for(var o of e)o.classList.toggle("collapsed",!t),o.setAttribute("aria-expanded",t)}static jQueryInterface(t){let o={};return"string"==typeof t&&/show|hide/.test(t)&&(o.toggle=!1),this.each(function(){var e=T.getOrCreateInstance(this,o);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}})}}g.on(document,"click.bs.collapse.data-api",Ce,function(e){("A"===e.target.tagName||e.delegateTarget&&"A"===e.delegateTarget.tagName)&&e.preventDefault();for(var t of h.getMultipleElementsFromSelector(this))T.getOrCreateInstance(t,{toggle:!1}).toggle()}),e(T);let De="dropdown";var y=".bs.dropdown",O=".data-api";let Ie="ArrowDown";var ke="click"+y+O,y="keydown"+y+O;let E="show",L='[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)',Re=(L,".dropdown-menu"),We=c()?"top-end":"top-start",Be=c()?"top-start":"top-end",Me=c()?"bottom-end":"bottom-start",Ne=c()?"bottom-start":"bottom-end",qe=c()?"left-start":"right-start",He=c()?"right-start":"left-start",Fe={autoClose:!0,boundary:"clippingParents",display:"dynamic",offset:[0,2],popperConfig:null,reference:"toggle"},ze={autoClose:"(boolean|string)",boundary:"(string|element)",display:"string",offset:"(array|string|function)",popperConfig:"(null|object|function)",reference:"(string|element|object)"};class A extends p{constructor(e,t){super(e,t),this._popper=null,this._parent=this._element.parentNode,this._menu=h.next(this._element,Re)[0]||h.prev(this._element,Re)[0]||h.findOne(Re,this._parent),this._inNavbar=this._detectNavbar()}static get Default(){return Fe}static get DefaultType(){return ze}static get NAME(){return De}toggle(){return this._isShown()?this.hide():this.show()}show(){if(!s(this._element)&&!this._isShown()){var e={relatedTarget:this._element},t=g.trigger(this._element,"show.bs.dropdown",e);if(!t.defaultPrevented){if(this._createPopper(),"ontouchstart"in document.documentElement&&!this._parent.closest(".navbar-nav"))for(var o of[].concat(...document.body.children))g.on(o,"mouseover",l);this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(E),this._element.classList.add(E),g.trigger(this._element,"shown.bs.dropdown",e)}}}hide(){var e;!s(this._element)&&this._isShown()&&(e={relatedTarget:this._element},this._completeHide(e))}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(e){var t=g.trigger(this._element,"hide.bs.dropdown",e);if(!t.defaultPrevented){if("ontouchstart"in document.documentElement)for(var o of[].concat(...document.body.children))g.off(o,"mouseover",l);this._popper&&this._popper.destroy(),this._menu.classList.remove(E),this._element.classList.remove(E),this._element.setAttribute("aria-expanded","false"),f.removeDataAttribute(this._menu,"popper"),g.trigger(this._element,"hidden.bs.dropdown",e)}}_getConfig(e){if("object"!=typeof(e=super._getConfig(e)).reference||i(e.reference)||"function"==typeof e.reference.getBoundingClientRect)return e;throw new TypeError(De.toUpperCase()+': Option "reference" provided type "object" without a required "getBoundingClientRect" method.')}_createPopper(){if(void 0===o)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let e=this._element;"parent"===this._config.reference?e=this._parent:i(this._config.reference)?e=n(this._config.reference):"object"==typeof this._config.reference&&(e=this._config.reference);var t=this._getPopperConfig();this._popper=o.createPopper(e,this._menu,t)}_isShown(){return this._menu.classList.contains(E)}_getPlacement(){var e,t=this._parent;return t.classList.contains("dropend")?qe:t.classList.contains("dropstart")?He:t.classList.contains("dropup-center")?"top":t.classList.contains("dropdown-center")?"bottom":(e="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim(),t.classList.contains("dropup")?e?Be:We:e?Ne:Me)}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){let t=this._config.offset;return"string"==typeof t?t.split(",").map(e=>Number.parseInt(e,10)):"function"==typeof t?e=>t(e,this._element):t}_getPopperConfig(){var e={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return!this._inNavbar&&"static"!==this._config.display||(f.setDataAttribute(this._menu,"popper","static"),e.modifiers=[{name:"applyStyles",enabled:!1}]),{...e,...d(this._config.popperConfig,[e])}}_selectMenuItem({key:e,target:t}){var o=h.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter(e=>a(e));o.length&&$(o,t,e===Ie,!o.includes(t)).focus()}static jQueryInterface(t){return this.each(function(){var e=A.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}})}static clearMenus(e){var t;if(2!==e.button&&("keyup"!==e.type||"Tab"===e.key))for(t of h.find('[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled).show')){var o,r,n=A.getInstance(t);n&&!1!==n._config.autoClose&&(o=(r=e.composedPath()).includes(n._menu),r.includes(n._element)||"inside"===n._config.autoClose&&!o||"outside"===n._config.autoClose&&o||n._menu.contains(e.target)&&("keyup"===e.type&&"Tab"===e.key||/input|select|option|textarea|form/i.test(e.target.tagName))||(r={relatedTarget:n._element},"click"===e.type&&(r.clickEvent=e),n._completeHide(r)))}}static dataApiKeydownHandler(e){var t=/input|textarea/i.test(e.target.tagName),o="Escape"===e.key,r=["ArrowUp",Ie].includes(e.key);!r&&!o||t&&!o||(e.preventDefault(),t=this.matches(L)?this:h.prev(this,L)[0]||h.next(this,L)[0]||h.findOne(L,e.delegateTarget.parentNode),o=A.getOrCreateInstance(t),r?(e.stopPropagation(),o.show(),o._selectMenuItem(e)):o._isShown()&&(e.stopPropagation(),o.hide(),t.focus()))}}g.on(document,y,L,A.dataApiKeydownHandler),g.on(document,y,Re,A.dataApiKeydownHandler),g.on(document,ke,A.clearMenus),g.on(document,"keyup.bs.dropdown.data-api",A.clearMenus),g.on(document,ke,L,function(e){e.preventDefault(),A.getOrCreateInstance(this).toggle()}),e(A);let Ue="backdrop",Ve="mousedown.bs."+Ue,$e={className:"modal-backdrop",clickCallback:null,isAnimated:!1,isVisible:!0,rootElement:"body"},Ye={className:"string",clickCallback:"(function|null)",isAnimated:"boolean",isVisible:"boolean",rootElement:"(element|string)"};class Xe extends t{constructor(e){super(),this._config=this._getConfig(e),this._isAppended=!1,this._element=null}static get Default(){return $e}static get DefaultType(){return Ye}static get NAME(){return Ue}show(e){var t;this._config.isVisible?(this._append(),t=this._getElement(),this._config.isAnimated&&u(t),t.classList.add("show"),this._emulateAnimation(()=>{d(e)})):d(e)}hide(e){this._config.isVisible?(this._getElement().classList.remove("show"),this._emulateAnimation(()=>{this.dispose(),d(e)})):d(e)}dispose(){this._isAppended&&(g.off(this._element,Ve),this._element.remove(),this._isAppended=!1)}_getElement(){var e;return this._element||((e=document.createElement("div")).className=this._config.className,this._config.isAnimated&&e.classList.add("fade"),this._element=e),this._element}_configAfterMerge(e){return e.rootElement=n(e.rootElement),e}_append(){var e;this._isAppended||(e=this._getElement(),this._config.rootElement.append(e),g.on(e,Ve,()=>{d(this._config.clickCallback)}),this._isAppended=!0)}_emulateAnimation(e){V(e,this._getElement(),this._config.isAnimated)}}let Ke=".bs.focustrap",Qe=(Ke,Ke,"backward"),Je={autofocus:!0,trapElement:null},Ge={autofocus:"boolean",trapElement:"element"};class Ze extends t{constructor(e){super(),this._config=this._getConfig(e),this._isActive=!1,this._lastTabNavDirection=null}static get Default(){return Je}static get DefaultType(){return Ge}static get NAME(){return"focustrap"}activate(){this._isActive||(this._config.autofocus&&this._config.trapElement.focus(),g.off(document,Ke),g.on(document,"focusin.bs.focustrap",e=>this._handleFocusin(e)),g.on(document,"keydown.tab.bs.focustrap",e=>this._handleKeydown(e)),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,g.off(document,Ke))}_handleFocusin(e){var t=this._config.trapElement;e.target===document||e.target===t||t.contains(e.target)||(0===(e=h.focusableChildren(t)).length?t:this._lastTabNavDirection===Qe?e[e.length-1]:e[0]).focus()}_handleKeydown(e){"Tab"===e.key&&(this._lastTabNavDirection=e.shiftKey?Qe:"forward")}}let et=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",tt=".sticky-top",ot="padding-right",rt="margin-right";class nt{constructor(){this._element=document.body}getWidth(){var e=document.documentElement.clientWidth;return Math.abs(window.innerWidth-e)}hide(){let t=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,ot,e=>e+t),this._setElementAttributes(et,ot,e=>e+t),this._setElementAttributes(tt,rt,e=>e-t)}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,ot),this._resetElementAttributes(et,ot),this._resetElementAttributes(tt,rt)}isOverflowing(){return 0<this.getWidth()}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(e,o,r){let n=this.getWidth();this._applyManipulationCallback(e,e=>{var t;e!==this._element&&window.innerWidth>e.clientWidth+n||(this._saveInitialAttribute(e,o),t=window.getComputedStyle(e).getPropertyValue(o),e.style.setProperty(o,r(Number.parseFloat(t))+"px"))})}_saveInitialAttribute(e,t){var o=e.style.getPropertyValue(t);o&&f.setDataAttribute(e,t,o)}_resetElementAttributes(e,o){this._applyManipulationCallback(e,e=>{var t=f.getDataAttribute(e,o);null===t?e.style.removeProperty(o):(f.removeDataAttribute(e,o),e.style.setProperty(o,t))})}_applyManipulationCallback(e,t){if(i(e))t(e);else for(var o of h.find(e,this._element))t(o)}}let P=".bs.modal";P,P;let it="hidden"+P,at="show"+P;P,P,P,P,P;P;let st="modal-open",lt="modal-static";let ut={backdrop:!0,focus:!0,keyboard:!0},ct={backdrop:"(boolean|string)",focus:"boolean",keyboard:"boolean"};class C extends p{constructor(e,t){super(e,t),this._dialog=h.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._isTransitioning=!1,this._scrollBar=new nt,this._addEventListeners()}static get Default(){return ut}static get DefaultType(){return ct}static get NAME(){return"modal"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||this._isTransitioning||g.trigger(this._element,at,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._isTransitioning=!0,this._scrollBar.hide(),document.body.classList.add(st),this._adjustDialog(),this._backdrop.show(()=>this._showElement(e)))}hide(){!this._isShown||this._isTransitioning||g.trigger(this._element,"hide.bs.modal").defaultPrevented||(this._isShown=!1,this._isTransitioning=!0,this._focustrap.deactivate(),this._element.classList.remove("show"),this._queueCallback(()=>this._hideModal(),this._element,this._isAnimated()))}dispose(){g.off(window,P),g.off(this._dialog,P),this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new Xe({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new Ze({trapElement:this._element})}_showElement(e){document.body.contains(this._element)||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0;var t=h.findOne(".modal-body",this._dialog);t&&(t.scrollTop=0),u(this._element),this._element.classList.add("show");this._queueCallback(()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,g.trigger(this._element,"shown.bs.modal",{relatedTarget:e})},this._dialog,this._isAnimated())}_addEventListeners(){g.on(this._element,"keydown.dismiss.bs.modal",e=>{"Escape"===e.key&&(this._config.keyboard?this.hide():this._triggerBackdropTransition())}),g.on(window,"resize.bs.modal",()=>{this._isShown&&!this._isTransitioning&&this._adjustDialog()}),g.on(this._element,"mousedown.dismiss.bs.modal",t=>{g.one(this._element,"click.dismiss.bs.modal",e=>{this._element===t.target&&this._element===e.target&&("static"===this._config.backdrop?this._triggerBackdropTransition():this._config.backdrop&&this.hide())})})}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide(()=>{document.body.classList.remove(st),this._resetAdjustments(),this._scrollBar.reset(),g.trigger(this._element,it)})}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){var t=g.trigger(this._element,"hidePrevented.bs.modal");if(!t.defaultPrevented){t=this._element.scrollHeight>document.documentElement.clientHeight;let e=this._element.style.overflowY;"hidden"===e||this._element.classList.contains(lt)||(t||(this._element.style.overflowY="hidden"),this._element.classList.add(lt),this._queueCallback(()=>{this._element.classList.remove(lt),this._queueCallback(()=>{this._element.style.overflowY=e},this._dialog)},this._dialog),this._element.focus())}}_adjustDialog(){var e,t=this._element.scrollHeight>document.documentElement.clientHeight,o=this._scrollBar.getWidth(),r=0<o;r&&!t&&(e=c()?"paddingLeft":"paddingRight",this._element.style[e]=o+"px"),!r&&t&&(e=c()?"paddingRight":"paddingLeft",this._element.style[e]=o+"px")}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(t,o){return this.each(function(){var e=C.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t](o)}})}}g.on(document,"click.bs.modal.data-api",'[data-bs-toggle="modal"]',function(e){let t=h.getElementFromSelector(this);["A","AREA"].includes(this.tagName)&&e.preventDefault(),g.one(t,at,e=>{e.defaultPrevented||g.one(t,it,()=>{a(this)&&this.focus()})});e=h.findOne(".modal.show");e&&C.getInstance(e).hide(),C.getOrCreateInstance(t).toggle(this)}),de(C),e(C);O=".bs.offcanvas";let dt="showing",ft=".offcanvas.show",pt="hidePrevented"+O,ht="hidden"+O;let gt={backdrop:!0,keyboard:!0,scroll:!1},mt={backdrop:"(boolean|string)",keyboard:"boolean",scroll:"boolean"};class x extends p{constructor(e,t){super(e,t),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get Default(){return gt}static get DefaultType(){return mt}static get NAME(){return"offcanvas"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||g.trigger(this._element,"show.bs.offcanvas",{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._backdrop.show(),this._config.scroll||(new nt).hide(),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(dt),this._queueCallback(()=>{this._config.scroll&&!this._config.backdrop||this._focustrap.activate(),this._element.classList.add("show"),this._element.classList.remove(dt),g.trigger(this._element,"shown.bs.offcanvas",{relatedTarget:e})},this._element,!0))}hide(){this._isShown&&!g.trigger(this._element,"hide.bs.offcanvas").defaultPrevented&&(this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.add("hiding"),this._backdrop.hide(),this._queueCallback(()=>{this._element.classList.remove("show","hiding"),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._config.scroll||(new nt).reset(),g.trigger(this._element,ht)},this._element,!0))}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_initializeBackDrop(){var e=Boolean(this._config.backdrop);return new Xe({className:"offcanvas-backdrop",isVisible:e,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:e?()=>{"static"===this._config.backdrop?g.trigger(this._element,pt):this.hide()}:null})}_initializeFocusTrap(){return new Ze({trapElement:this._element})}_addEventListeners(){g.on(this._element,"keydown.dismiss.bs.offcanvas",e=>{"Escape"===e.key&&(this._config.keyboard?this.hide():g.trigger(this._element,pt))})}static jQueryInterface(t){return this.each(function(){var e=x.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}})}}g.on(document,"click.bs.offcanvas.data-api",'[data-bs-toggle="offcanvas"]',function(e){var t=h.getElementFromSelector(this);["A","AREA"].includes(this.tagName)&&e.preventDefault(),s(this)||(g.one(t,ht,()=>{a(this)&&this.focus()}),(e=h.findOne(ft))&&e!==t&&x.getInstance(e).hide(),x.getOrCreateInstance(t).toggle(this))}),g.on(window,"load.bs.offcanvas.data-api",()=>{for(var e of h.find(ft))x.getOrCreateInstance(e).show()}),g.on(window,"resize.bs.offcanvas",()=>{for(var e of h.find("[aria-modal][class*=show][class*=offcanvas-]"))"fixed"!==getComputedStyle(e).position&&x.getOrCreateInstance(e).hide()}),de(x),e(x);y={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],dd:[],div:[],dl:[],dt:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]};let yt=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),bt=/^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i;function vt(e,t,o){if(!e.length)return e;if(o&&"function"==typeof o)return o(e);var r,o=(new window.DOMParser).parseFromString(e,"text/html");for(r of[].concat(...o.body.querySelectorAll("*"))){var n=r.nodeName.toLowerCase();if(Object.keys(t).includes(n)){var i,a=[].concat(...r.attributes),s=[].concat(t["*"]||[],t[n]||[]);for(i of a)((e,t)=>{let o=e.nodeName.toLowerCase();return t.includes(o)?!yt.has(o)||Boolean(bt.test(e.nodeValue)):t.filter(e=>e instanceof RegExp).some(e=>e.test(o))})(i,s)||r.removeAttribute(i.nodeName)}else r.remove()}return o.body.innerHTML}let _t={allowList:y,content:{},extraClass:"",html:!1,sanitize:!0,sanitizeFn:null,template:"<div></div>"},wt={allowList:"object",content:"object",extraClass:"(string|function)",html:"boolean",sanitize:"boolean",sanitizeFn:"(null|function)",template:"string"},St={entry:"(string|element|function|null)",selector:"(string|element)"};class Tt extends t{constructor(e){super(),this._config=this._getConfig(e)}static get Default(){return _t}static get DefaultType(){return wt}static get NAME(){return"TemplateFactory"}getContent(){return Object.values(this._config.content).map(e=>this._resolvePossibleFunction(e)).filter(Boolean)}hasContent(){return 0<this.getContent().length}changeContent(e){return this._checkContent(e),this._config.content={...this._config.content,...e},this}toHtml(){var e,t,o=document.createElement("div");o.innerHTML=this._maybeSanitize(this._config.template);for([e,t]of Object.entries(this._config.content))this._setContent(o,t,e);var r=o.children[0],n=this._resolvePossibleFunction(this._config.extraClass);return n&&r.classList.add(...n.split(" ")),r}_typeCheckConfig(e){super._typeCheckConfig(e),this._checkContent(e.content)}_checkContent(e){for(var[t,o]of Object.entries(e))super._typeCheckConfig({selector:t,entry:o},St)}_setContent(e,t,o){o=h.findOne(o,e);o&&((t=this._resolvePossibleFunction(t))?i(t)?this._putElementInTemplate(n(t),o):this._config.html?o.innerHTML=this._maybeSanitize(t):o.textContent=t:o.remove())}_maybeSanitize(e){return this._config.sanitize?vt(e,this._config.allowList,this._config.sanitizeFn):e}_resolvePossibleFunction(e){return d(e,[this])}_putElementInTemplate(e,t){this._config.html?(t.innerHTML="",t.append(e)):t.textContent=e.textContent}}let Ot=new Set(["sanitize","allowList","sanitizeFn"]),Et="fade";let Lt="show",At="hide.bs.modal",j="hover",Pt="focus",Ct={AUTO:"auto",TOP:"top",RIGHT:c()?"left":"right",BOTTOM:"bottom",LEFT:c()?"right":"left"},xt={allowList:y,animation:!0,boundary:"clippingParents",container:!1,customClass:"",delay:0,fallbackPlacements:["top","right","bottom","left"],html:!1,offset:[0,6],placement:"top",popperConfig:null,sanitize:!0,sanitizeFn:null,selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',title:"",trigger:"hover focus"},jt={allowList:"object",animation:"boolean",boundary:"(string|element)",container:"(string|element|boolean)",customClass:"(string|function)",delay:"(number|object)",fallbackPlacements:"array",html:"boolean",offset:"(array|string|function)",placement:"(string|function)",popperConfig:"(null|object|function)",sanitize:"boolean",sanitizeFn:"(null|function)",selector:"(string|boolean)",template:"string",title:"(string|element|function)",trigger:"string"};class D extends p{constructor(e,t){if(void 0===o)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(e,t),this._isEnabled=!0,this._timeout=0,this._isHovered=null,this._activeTrigger={},this._popper=null,this._templateFactory=null,this._newContent=null,this.tip=null,this._setListeners(),this._config.selector||this._fixTitle()}static get Default(){return xt}static get DefaultType(){return jt}static get NAME(){return"tooltip"}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(){this._isEnabled&&(this._activeTrigger.click=!this._activeTrigger.click,this._isShown()?this._leave():this._enter())}dispose(){clearTimeout(this._timeout),g.off(this._element.closest(".modal"),At,this._hideModalHandler),this._element.getAttribute("data-bs-original-title")&&this._element.setAttribute("title",this._element.getAttribute("data-bs-original-title")),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(this._isWithContent()&&this._isEnabled){var e=g.trigger(this._element,this.constructor.eventName("show")),t=(F(this._element)||this._element.ownerDocument.documentElement).contains(this._element);if(!e.defaultPrevented&&t){this._disposePopper();e=this._getTipElement(),t=(this._element.setAttribute("aria-describedby",e.getAttribute("id")),this._config).container;if(this._element.ownerDocument.documentElement.contains(this.tip)||(t.append(e),g.trigger(this._element,this.constructor.eventName("inserted"))),this._popper=this._createPopper(e),e.classList.add(Lt),"ontouchstart"in document.documentElement)for(var o of[].concat(...document.body.children))g.on(o,"mouseover",l);this._queueCallback(()=>{g.trigger(this._element,this.constructor.eventName("shown")),!1===this._isHovered&&this._leave(),this._isHovered=!1},this.tip,this._isAnimated())}}}hide(){if(this._isShown()){var e=g.trigger(this._element,this.constructor.eventName("hide"));if(!e.defaultPrevented){if(this._getTipElement().classList.remove(Lt),"ontouchstart"in document.documentElement)for(var t of[].concat(...document.body.children))g.off(t,"mouseover",l);this._activeTrigger.click=!1,this._activeTrigger[Pt]=!1,this._activeTrigger[j]=!1,this._isHovered=null;this._queueCallback(()=>{this._isWithActiveTrigger()||(this._isHovered||this._disposePopper(),this._element.removeAttribute("aria-describedby"),g.trigger(this._element,this.constructor.eventName("hidden")))},this.tip,this._isAnimated())}}}update(){this._popper&&this._popper.update()}_isWithContent(){return Boolean(this._getTitle())}_getTipElement(){return this.tip||(this.tip=this._createTipElement(this._newContent||this._getContentForTemplate())),this.tip}_createTipElement(e){e=this._getTemplateFactory(e).toHtml();if(!e)return null;e.classList.remove(Et,Lt),e.classList.add(`bs-${this.constructor.NAME}-auto`);var t=(e=>{for(;e+=Math.floor(1e6*Math.random()),document.getElementById(e););return e})(this.constructor.NAME).toString();return e.setAttribute("id",t),this._isAnimated()&&e.classList.add(Et),e}setContent(e){this._newContent=e,this._isShown()&&(this._disposePopper(),this.show())}_getTemplateFactory(e){return this._templateFactory?this._templateFactory.changeContent(e):this._templateFactory=new Tt({...this._config,content:e,extraClass:this._resolvePossibleFunction(this._config.customClass)}),this._templateFactory}_getContentForTemplate(){return{".tooltip-inner":this._getTitle()}}_getTitle(){return this._resolvePossibleFunction(this._config.title)||this._element.getAttribute("data-bs-original-title")}_initializeOnDelegatedTarget(e){return this.constructor.getOrCreateInstance(e.delegateTarget,this._getDelegateConfig())}_isAnimated(){return this._config.animation||this.tip&&this.tip.classList.contains(Et)}_isShown(){return this.tip&&this.tip.classList.contains(Lt)}_createPopper(e){var t=d(this._config.placement,[this,e,this._element]),t=Ct[t.toUpperCase()];return o.createPopper(this._element,e,this._getPopperConfig(t))}_getOffset(){let t=this._config.offset;return"string"==typeof t?t.split(",").map(e=>Number.parseInt(e,10)):"function"==typeof t?e=>t(e,this._element):t}_resolvePossibleFunction(e){return d(e,[this._element])}_getPopperConfig(e){e={placement:e,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"preSetPlacement",enabled:!0,phase:"beforeMain",fn:e=>{this._getTipElement().setAttribute("data-popper-placement",e.state.placement)}}]};return{...e,...d(this._config.popperConfig,[e])}}_setListeners(){var e,t,o;for(e of this._config.trigger.split(" "))"click"===e?g.on(this._element,this.constructor.eventName("click"),this._config.selector,e=>{this._initializeOnDelegatedTarget(e).toggle()}):"manual"!==e&&(t=e===j?this.constructor.eventName("mouseenter"):this.constructor.eventName("focusin"),o=e===j?this.constructor.eventName("mouseleave"):this.constructor.eventName("focusout"),g.on(this._element,t,this._config.selector,e=>{var t=this._initializeOnDelegatedTarget(e);t._activeTrigger["focusin"===e.type?Pt:j]=!0,t._enter()}),g.on(this._element,o,this._config.selector,e=>{var t=this._initializeOnDelegatedTarget(e);t._activeTrigger["focusout"===e.type?Pt:j]=t._element.contains(e.relatedTarget),t._leave()}));this._hideModalHandler=()=>{this._element&&this.hide()},g.on(this._element.closest(".modal"),At,this._hideModalHandler)}_fixTitle(){var e=this._element.getAttribute("title");e&&(this._element.getAttribute("aria-label")||this._element.textContent.trim()||this._element.setAttribute("aria-label",e),this._element.setAttribute("data-bs-original-title",e),this._element.removeAttribute("title"))}_enter(){this._isShown()||this._isHovered?this._isHovered=!0:(this._isHovered=!0,this._setTimeout(()=>{this._isHovered&&this.show()},this._config.delay.show))}_leave(){this._isWithActiveTrigger()||(this._isHovered=!1,this._setTimeout(()=>{this._isHovered||this.hide()},this._config.delay.hide))}_setTimeout(e,t){clearTimeout(this._timeout),this._timeout=setTimeout(e,t)}_isWithActiveTrigger(){return Object.values(this._activeTrigger).includes(!0)}_getConfig(e){var t,o=f.getDataAttributes(this._element);for(t of Object.keys(o))Ot.has(t)&&delete o[t];return e={...o,..."object"==typeof e&&e?e:{}},e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e.container=!1===e.container?document.body:n(e.container),"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),e}_getDelegateConfig(){var e,t,o={};for([e,t]of Object.entries(this._config))this.constructor.Default[e]!==t&&(o[e]=t);return o.selector=!1,o.trigger="manual",o}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null),this.tip&&(this.tip.remove(),this.tip=null)}static jQueryInterface(t){return this.each(function(){var e=D.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}})}}e(D);let Dt={...D.Default,content:"",offset:[0,8],placement:"right",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',trigger:"click"},It={...D.DefaultType,content:"(null|string|element|function)"};class kt extends D{static get Default(){return Dt}static get DefaultType(){return It}static get NAME(){return"popover"}_isWithContent(){return this._getTitle()||this._getContent()}_getContentForTemplate(){return{".popover-header":this._getTitle(),".popover-body":this._getContent()}}_getContent(){return this._resolvePossibleFunction(this._config.content)}static jQueryInterface(t){return this.each(function(){var e=kt.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}})}}e(kt);ke=".bs.scrollspy";let Rt="click"+ke;let I="active",Wt="[href]";let Bt={offset:null,rootMargin:"0px 0px -25%",smoothScroll:!1,target:null,threshold:[.1,.5,1]},Mt={offset:"(number|null)",rootMargin:"string",smoothScroll:"boolean",target:"element",threshold:"array"};class Nt extends p{constructor(e,t){super(e,t),this._targetLinks=new Map,this._observableSections=new Map,this._rootElement="visible"===getComputedStyle(this._element).overflowY?null:this._element,this._activeTarget=null,this._observer=null,this._previousScrollData={visibleEntryTop:0,parentScrollTop:0},this.refresh()}static get Default(){return Bt}static get DefaultType(){return Mt}static get NAME(){return"scrollspy"}refresh(){this._initializeTargetsAndObservables(),this._maybeEnableSmoothScroll(),this._observer?this._observer.disconnect():this._observer=this._getNewObserver();for(var e of this._observableSections.values())this._observer.observe(e)}dispose(){this._observer.disconnect(),super.dispose()}_configAfterMerge(e){return e.target=n(e.target)||document.body,e.rootMargin=e.offset?e.offset+"px 0px -30%":e.rootMargin,"string"==typeof e.threshold&&(e.threshold=e.threshold.split(",").map(e=>Number.parseFloat(e))),e}_maybeEnableSmoothScroll(){this._config.smoothScroll&&(g.off(this._config.target,Rt),g.on(this._config.target,Rt,Wt,e=>{var t=this._observableSections.get(e.target.hash);t&&(e.preventDefault(),e=this._rootElement||window,t=t.offsetTop-this._element.offsetTop,e.scrollTo?e.scrollTo({top:t,behavior:"smooth"}):e.scrollTop=t)}))}_getNewObserver(){var e={root:this._rootElement,threshold:this._config.threshold,rootMargin:this._config.rootMargin};return new IntersectionObserver(e=>this._observerCallback(e),e)}_observerCallback(e){let t=e=>this._targetLinks.get("#"+e.target.id);var o,r=e=>{this._previousScrollData.visibleEntryTop=e.target.offsetTop,this._process(t(e))},n=(this._rootElement||document.documentElement).scrollTop,i=n>=this._previousScrollData.parentScrollTop;this._previousScrollData.parentScrollTop=n;for(o of e)if(o.isIntersecting){var a=o.target.offsetTop>=this._previousScrollData.visibleEntryTop;if(i&&a){if(r(o),n)continue;return}i||a||r(o)}else this._activeTarget=null,this._clearActiveClass(t(o))}_initializeTargetsAndObservables(){var e,t;this._targetLinks=new Map,this._observableSections=new Map;for(e of h.find(Wt,this._config.target))e.hash&&!s(e)&&(t=h.findOne(decodeURI(e.hash),this._element),a(t))&&(this._targetLinks.set(decodeURI(e.hash),e),this._observableSections.set(e.hash,t))}_process(e){this._activeTarget!==e&&(this._clearActiveClass(this._config.target),(this._activeTarget=e).classList.add(I),this._activateParents(e),g.trigger(this._element,"activate.bs.scrollspy",{relatedTarget:e}))}_activateParents(e){if(e.classList.contains("dropdown-item"))h.findOne(".dropdown-toggle",e.closest(".dropdown")).classList.add(I);else for(var t of h.parents(e,".nav, .list-group"))for(var o of h.prev(t,".nav-link, .nav-item > .nav-link, .list-group-item"))o.classList.add(I)}_clearActiveClass(e){var t;e.classList.remove(I);for(t of h.find(Wt+"."+I,e))t.classList.remove(I)}static jQueryInterface(t){return this.each(function(){var e=Nt.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t]()}})}}g.on(window,"load.bs.scrollspy.data-api",()=>{for(var e of h.find('[data-bs-spy="scroll"]'))Nt.getOrCreateInstance(e)}),e(Nt);let qt="ArrowRight",Ht="ArrowDown",Ft="Home",k="active",zt="show",Ut=".dropdown-toggle";Ut;O='[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]';let Vt='.nav-link:not(.dropdown-toggle), .list-group-item:not(.dropdown-toggle), [role="tab"]:not(.dropdown-toggle), '+O;k,k,k;class R extends p{constructor(e){super(e),this._parent=this._element.closest('.list-group, .nav, [role="tablist"]'),this._parent&&(this._setInitialAttributes(this._parent,this._getChildren()),g.on(this._element,"keydown.bs.tab",e=>this._keydown(e)))}static get NAME(){return"tab"}show(){var e,t,o=this._element;this._elemIsActive(o)||(t=(e=this._getActiveElem())?g.trigger(e,"hide.bs.tab",{relatedTarget:o}):null,g.trigger(o,"show.bs.tab",{relatedTarget:e}).defaultPrevented)||t&&t.defaultPrevented||(this._deactivate(e,o),this._activate(o,e))}_activate(e,t){e&&(e.classList.add(k),this._activate(h.getElementFromSelector(e)),this._queueCallback(()=>{"tab"!==e.getAttribute("role")?e.classList.add(zt):(e.removeAttribute("tabindex"),e.setAttribute("aria-selected",!0),this._toggleDropDown(e,!0),g.trigger(e,"shown.bs.tab",{relatedTarget:t}))},e,e.classList.contains("fade")))}_deactivate(e,t){e&&(e.classList.remove(k),e.blur(),this._deactivate(h.getElementFromSelector(e)),this._queueCallback(()=>{"tab"!==e.getAttribute("role")?e.classList.remove(zt):(e.setAttribute("aria-selected",!1),e.setAttribute("tabindex","-1"),this._toggleDropDown(e,!1),g.trigger(e,"hidden.bs.tab",{relatedTarget:t}))},e,e.classList.contains("fade")))}_keydown(t){if(["ArrowLeft",qt,"ArrowUp",Ht,Ft,"End"].includes(t.key)){t.stopPropagation(),t.preventDefault();var o,r=this._getChildren().filter(e=>!s(e));let e;(e=[Ft,"End"].includes(t.key)?r[t.key===Ft?0:r.length-1]:(o=[qt,Ht].includes(t.key),$(r,t.target,o,!0)))&&(e.focus({preventScroll:!0}),R.getOrCreateInstance(e).show())}}_getChildren(){return h.find(Vt,this._parent)}_getActiveElem(){return this._getChildren().find(e=>this._elemIsActive(e))||null}_setInitialAttributes(e,t){this._setAttributeIfNotExists(e,"role","tablist");for(var o of t)this._setInitialAttributesOnChild(o)}_setInitialAttributesOnChild(e){e=this._getInnerElement(e);var t=this._elemIsActive(e),o=this._getOuterElement(e);e.setAttribute("aria-selected",t),o!==e&&this._setAttributeIfNotExists(o,"role","presentation"),t||e.setAttribute("tabindex","-1"),this._setAttributeIfNotExists(e,"role","tab"),this._setInitialAttributesOnTargetPanel(e)}_setInitialAttributesOnTargetPanel(e){var t=h.getElementFromSelector(e);t&&(this._setAttributeIfNotExists(t,"role","tabpanel"),e.id)&&this._setAttributeIfNotExists(t,"aria-labelledby",""+e.id)}_toggleDropDown(e,o){let r=this._getOuterElement(e);r.classList.contains("dropdown")&&((e=(e,t)=>{e=h.findOne(e,r);e&&e.classList.toggle(t,o)})(Ut,k),e(".dropdown-menu",zt),r.setAttribute("aria-expanded",o))}_setAttributeIfNotExists(e,t,o){e.hasAttribute(t)||e.setAttribute(t,o)}_elemIsActive(e){return e.classList.contains(k)}_getInnerElement(e){return e.matches(Vt)?e:h.findOne(Vt,e)}_getOuterElement(e){return e.closest(".nav-item, .list-group-item")||e}static jQueryInterface(t){return this.each(function(){var e=R.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t]()}})}}g.on(document,"click.bs.tab",O,function(e){["A","AREA"].includes(this.tagName)&&e.preventDefault(),s(this)||R.getOrCreateInstance(this).show()}),g.on(window,"load.bs.tab",()=>{for(var e of h.find('.active[data-bs-toggle="tab"], .active[data-bs-toggle="pill"], .active[data-bs-toggle="list"]'))R.getOrCreateInstance(e)}),e(R);let $t="show",Yt="showing",Xt={animation:"boolean",autohide:"boolean",delay:"number"},Kt={animation:!0,autohide:!0,delay:5e3};class Qt extends p{constructor(e,t){super(e,t),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get Default(){return Kt}static get DefaultType(){return Xt}static get NAME(){return"toast"}show(){g.trigger(this._element,"show.bs.toast").defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove("hide"),u(this._element),this._element.classList.add($t,Yt),this._queueCallback(()=>{this._element.classList.remove(Yt),g.trigger(this._element,"shown.bs.toast"),this._maybeScheduleHide()},this._element,this._config.animation))}hide(){this.isShown()&&!g.trigger(this._element,"hide.bs.toast").defaultPrevented&&(this._element.classList.add(Yt),this._queueCallback(()=>{this._element.classList.add("hide"),this._element.classList.remove(Yt,$t),g.trigger(this._element,"hidden.bs.toast")},this._element,this._config.animation))}dispose(){this._clearTimeout(),this.isShown()&&this._element.classList.remove($t),super.dispose()}isShown(){return this._element.classList.contains($t)}_maybeScheduleHide(){!this._config.autohide||this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout(()=>{this.hide()},this._config.delay))}_onInteraction(e,t){switch(e.type){case"mouseover":case"mouseout":this._hasMouseInteraction=t;break;case"focusin":case"focusout":this._hasKeyboardInteraction=t}t?this._clearTimeout():this._element===(e=e.relatedTarget)||this._element.contains(e)||this._maybeScheduleHide()}_setListeners(){g.on(this._element,"mouseover.bs.toast",e=>this._onInteraction(e,!0)),g.on(this._element,"mouseout.bs.toast",e=>this._onInteraction(e,!1)),g.on(this._element,"focusin.bs.toast",e=>this._onInteraction(e,!0)),g.on(this._element,"focusout.bs.toast",e=>this._onInteraction(e,!1))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(t){return this.each(function(){var e=Qt.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t](this)}})}}return de(Qt),e(Qt),{Alert:fe,Button:he,Carousel:w,Collapse:T,Dropdown:A,Modal:C,Offcanvas:x,Popover:kt,ScrollSpy:Nt,Tab:R,Toast:Qt,Tooltip:D}},"object"==typeof o&&void 0!==t?t.exports=n(e("@popperjs/core")):"function"==typeof define&&define.amd?define(["@popperjs/core"],n):(r="undefined"!=typeof globalThis?globalThis:r||self).bootstrap=n(r.Popper)},{"@popperjs/core":1}],3:[function(e,t,o){var r=e("./tuxboard/common"),n=e("./tuxboard/tuxbar/Tuxbar"),i=e("./tuxboard/tuxboard");(0,r.ready)(function(){var e=new i.Tuxboard;e.initialize(),new n.Tuxbar(e,r.defaultTuxbarSelector).initialize()})},{"./tuxboard/common":4,"./tuxboard/tuxbar/Tuxbar":25,"./tuxboard/tuxboard":31}],4:[function(e,t,o){Object.defineProperty(o,"__esModule",{value:!0}),o.clearNodes=function(e){for(;e.firstChild;)e.firstChild.remove()},o.collapsedToggleSelector=void 0,o.createFromHtml=function(e){var t=document.createElement("div");return t.innerHTML=e.trim(),Array.from(t.children)},o.createNodesFromHtml=function(e){return document.createRange().createContextualFragment(e)},o.defaultWidgetToolbarSelector=o.defaultWidgetTitleSelector=o.defaultWidgetTabGroupSelector=o.defaultWidgetStateSelector=o.defaultWidgetSettingsSelector=o.defaultWidgetSettingsSaveButtonSelector=o.defaultWidgetSettingsCancelButtonSelector=o.defaultWidgetSettingInputsSelector=o.defaultWidgetSelector=o.defaultWidgetSelectionSelector=o.defaultWidgetRemoveWidgetSelector=o.defaultWidgetListItemSelector=o.defaultWidgetHeaderSelector=o.defaultWidgetDropdownSelector=o.defaultWidgetBodySelector=o.defaultTuxbarSpinnerSelector=o.defaultTuxbarSelector=o.defaultTuxbarRefreshButton=o.defaultTuxbarMessageSelector=o.defaultTabSelector=o.defaultSimpleLayoutDialogSelector=o.defaultSimpleLayoutButton=o.defaultSaveLayoutButtonSelector=o.defaultSaveAdvancedLayoutButtonSelector=o.defaultLoadingSelector=o.defaultLayoutRowSelector=o.defaultLayoutRowPlaceholderSelector=o.defaultLayoutRowListSelector=o.defaultLayoutRowItemSelector=o.defaultLayoutRowItemHandleSelector=o.defaultLayoutListSelector=o.defaultLayoutItemSelector=o.defaultGeneralOverlaySelector=o.defaultDropdownLayoutTypesSelector=o.defaultDropdownLayoutRowTypeSelector=o.defaultDropdownInWidgetHeaderSelector=o.defaultDeleteRowLayoutButtonSelector=o.defaultDashboardSelector=o.defaultColumnSelector=o.defaultAdvancedLayoutDialogSelector=o.defaultAdvancedLayoutButton=o.defaultAddWidgetDialogSelector=o.defaultAddWidgetButton=o.defaultAddButtonSelector=o.dataIdAttribute=void 0,o.getClosestByClass=b,o.getColumnByPlacement=y,o.getColumnIndexByDragInfo=_,o.getDataId=d,o.getDomWidget=h,o.getParent=b,o.getWidgetIndex=v,o.getWidgetSnapshot=function(e,t){return Array.from(t.getDom().querySelectorAll(n)).map(function(e){var t=d(e),o=b(e,p(a)),r=v(0,t),n=_(t);return new i.PlacementItem(t,r,o.getAttribute(u),n,f(e))})},o.hideElement=function(e){e.setAttribute("hidden","")},o.isBefore=function(e,t){var o;if(t.parentNode===e.parentNode)for(o=e.previousSibling;o;o=o.previousSibling)if(o===t)return!0;return!1},o.isColumn=m,o.isDisabled=function(e){return e.hasAttribute("disabled")},o.isHidden=function(e){return e.hasAttribute("hidden")},o.isRowLayoutListItem=function(e){return e&&e.tagName&&"li"===e.tagName.toLowerCase()&&e.classList.contains(p(l))},o.isStatic=f,o.isWidget=g,o.isWidgetOrColumn=function(e){return g(e)||m(e)},o.noPeriod=p,o.ready=function(e){"loading"!==document.readyState?e():document.addEventListener("DOMContentLoaded",e)},o.showElement=function(e){e.removeAttribute("hidden")},o.staticAttribute=void 0;var i=e("./dto/PlacementItem"),a=(o.defaultDashboardSelector=".dashboard",o.defaultTabSelector=".dashboard-tab",o.defaultLayoutRowSelector=".layout-row"),r=o.defaultColumnSelector=".column",n=o.defaultWidgetSelector=".card",s=o.defaultWidgetHeaderSelector=".card-header",l=(o.defaultWidgetTitleSelector=".card-title",o.defaultWidgetBodySelector=".card-body",o.defaultGeneralOverlaySelector=".overlay",o.defaultLoadingSelector=".loading-status",o.defaultWidgetSettingsSelector=".widget-settings",o.defaultWidgetSettingsCancelButtonSelector=".settings-cancel",o.defaultWidgetSettingsSaveButtonSelector=".settings-save",o.defaultWidgetSettingInputsSelector=".setting-value",o.defaultWidgetToolbarSelector=".widget-toolbar",o.defaultWidgetDropdownSelector=".dropdown-toggle",o.defaultDropdownInWidgetHeaderSelector="".concat(s," ").concat(".dropdown-toggle"),o.defaultWidgetRemoveWidgetSelector=".remove-widget",o.defaultWidgetStateSelector=".widget-state",o.defaultTuxbarSelector=".tuxbar",o.defaultTuxbarRefreshButton="#refresh-button",o.defaultTuxbarMessageSelector="#tuxbar-status",o.defaultTuxbarSpinnerSelector="#tuxbar-spinner",o.defaultAddWidgetButton="#add-widget-button",o.defaultAddWidgetDialogSelector="#add-widget-dialog",o.defaultWidgetTabGroupSelector="button.nav-link",o.defaultWidgetListItemSelector="li.list-group-item",o.defaultAddButtonSelector=".add-widget",o.defaultWidgetSelectionSelector=".active",o.defaultSimpleLayoutButton="#layout-button",o.defaultSimpleLayoutDialogSelector="#layout-dialog",o.defaultLayoutListSelector=".layout-list",o.defaultLayoutItemSelector="li",o.defaultSaveLayoutButtonSelector=".save-layout",o.defaultAdvancedLayoutButton="#advanced-layout-button",o.defaultAdvancedLayoutDialogSelector="#advanced-layout-dialog",o.defaultDropdownLayoutTypesSelector=".row-layout-types",o.defaultDropdownLayoutRowTypeSelector="".concat(".row-layout-types"," option"),o.defaultLayoutRowListSelector=".row-layout-list",o.defaultLayoutRowItemHandleSelector=".handle",o.defaultLayoutRowItemSelector=".row-layout-item"),u=(o.defaultLayoutRowPlaceholderSelector=".placeholder",o.defaultDeleteRowLayoutButtonSelector=".row-layout-delete-button",o.defaultSaveAdvancedLayoutButtonSelector=".save-advanced-layout",o.dataIdAttribute="data-id"),c=o.staticAttribute="data-static";o.collapsedToggleSelector="collapsed";function d(e){return e.getAttribute(u)}function f(e){return e.hasAttribute(c)}function p(e){return e.startsWith(".")?e.replace(".",""):e}function h(e){return document.querySelector("[".concat(u,"='").concat(e,"']"))}function g(e){return e&&e.classList.contains(p(s))}function m(e){return e&&e.classList.contains(p(r))}function y(e){return b(h(e),p(r))}function b(e,t){for(;e;){if(e.classList.contains(t))return e;e=e.parentElement}}function v(e,t){var o=y(t).querySelectorAll(n);return Array.from(o).findIndex(function(e){return e.getAttribute(u)===t})}function _(t){var e=y(t);return Array.from(e.parentElement.querySelectorAll(r)).findIndex(function(e){return null!=e.querySelector("[".concat(u,"='").concat(t,"']"))})}},{"./dto/PlacementItem":11}],5:[function(e,t,o){function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(o,"__esModule",{value:!0}),o.BaseDialog=void 0;var r=((e,t)=>{if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=a(e)&&"function"!=typeof e)return{default:e};if((t=s(t))&&t.has(e))return t.get(e);var o,r,n={__proto__:null},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(o in e)"default"!==o&&{}.hasOwnProperty.call(e,o)&&((r=i?Object.getOwnPropertyDescriptor(e,o):null)&&(r.get||r.set)?Object.defineProperty(n,o,r):n[o]=e[o]);return n.default=e,t&&t.set(e,n),n})(e("bootstrap"));function s(e){var t,o;return"function"!=typeof WeakMap?null:(t=new WeakMap,o=new WeakMap,(s=function(e){return e?o:t})(e))}function n(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(e=>(e=((e,t)=>{if("object"!=a(e)||!e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===t?String:Number)(e);if("object"!=a(o=o.call(e,t||"default")))return o;throw new TypeError("@@toPrimitive must return a primitive value.")})(e,"string"),"symbol"==a(e)?e:e+""))(r.key),r)}}function i(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),Object.defineProperty(e,"prototype",{writable:!1}),e}o.BaseDialog=i(function e(t){var o=this;if(!(this instanceof e))throw new TypeError("Cannot call a class as a function");this.selector=t,this.dialogBodySelector=".modal-body",this.getDialogInstance=function(){return r.Modal.getOrCreateInstance(o.getDialog())},this.getDom=function(){return o.getDialog()},this.getDialog=function(){return document.querySelector(o.selector)},this.showDialog=function(){return o.getDialogInstance().show()},this.hideDialog=function(){return o.getDialogInstance().hide()}})},{bootstrap:2}],6:[function(e,t,o){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(o,"__esModule",{value:!0}),o.AddWidgetDialog=void 0;var i=e("../../common"),e=e("../BaseDialog");function a(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(e=>(e=((e,t)=>{if("object"!=n(e)||!e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===t?String:Number)(e);if("object"!=n(o=o.call(e,t||"default")))return o;throw new TypeError("@@toPrimitive must return a primitive value.")})(e,"string"),"symbol"==n(e)?e:e+""))(r.key),r)}}function s(e,t,o){t=u(t);var r=e,t=l()?Reflect.construct(t,o||[],u(e).constructor):t.apply(e,o);if(!t||"object"!=n(t)&&"function"!=typeof t){if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0===(t=r))throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return t}function l(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(e){}return(l=function(){return!!e})()}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){return(c=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}o.AddWidgetDialog=(e=>{function r(e,t){var o;if(this instanceof r)return(o=s(this,r,[e])).tuxboard=t,o.allowRefresh=!1,o.initialize=function(){o.getDom().addEventListener("shown.bs.modal",function(){return o.loadDialog()})},o.getService=function(){return o.tuxboard.getService()},o.getAddWidgetButton=function(){return o.getDom().querySelector(i.defaultAddButtonSelector)},o.getWidgetItems=function(){return o.getDom().querySelectorAll(i.defaultWidgetListItemSelector)},o.loadDialog=function(){o.getService().getAddWidgetDialog().then(function(e){o.getDom().querySelector(".modal-body").innerHTML=e,o.attachEvents()})},o.getSelected=function(){return o.getDom().querySelector("li"+i.defaultWidgetSelectionSelector)},o.getSelectedId=function(){return o.getSelected().getAttribute(i.dataIdAttribute)},o.clearSelected=function(){Array.from(o.getWidgetItems()).forEach(function(e){e.classList.remove((0,i.noPeriod)(i.defaultWidgetSelectionSelector))})},o.attachEvents=function(){var e=o.getWidgetItems(),e=(Array.from(e).forEach(function(e){e.removeEventListener("click",function(){o.listItemOnClick(e)}),e.addEventListener("click",function(){o.listItemOnClick(e)})}),o.getAddWidgetButton());null!=e&&e.removeEventListener("click",o.addWidgetToLayout,!1),null!=e&&e.addEventListener("click",o.addWidgetToLayout,!1)},o.listItemOnClick=function(e){o.clearSelected(),e.classList.add((0,i.noPeriod)(i.defaultWidgetSelectionSelector))},o.addWidgetToLayout=function(e){e.preventDefault(),e.stopImmediatePropagation(),o.getService().addWidget(o.getSelectedId()).then(function(){o.allowRefresh=!0,o.hideDialog()})},o.initialize(),o;throw new TypeError("Cannot call a class as a function")}var t,o,n=r;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");return n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),Object.defineProperty(n,"prototype",{writable:!1}),e&&c(n,e),n=r,t&&a(n.prototype,t),o&&a(n,o),Object.defineProperty(n,"prototype",{writable:!1}),n})(e.BaseDialog)},{"../../common":4,"../BaseDialog":5}],7:[function(e,t,o){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(o,"__esModule",{value:!0}),o.AdvancedLayoutDialog=void 0;var i=e("../../common"),r=e("../BaseDialog"),a=e("./LayoutItem"),s=e("./LayoutModel");function l(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(e=>(e=((e,t)=>{if("object"!=n(e)||!e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===t?String:Number)(e);if("object"!=n(o=o.call(e,t||"default")))return o;throw new TypeError("@@toPrimitive must return a primitive value.")})(e,"string"),"symbol"==n(e)?e:e+""))(r.key),r)}}function u(e,t,o){t=d(t);var r=e,t=c()?Reflect.construct(t,o||[],d(e).constructor):t.apply(e,o);if(!t||"object"!=n(t)&&"function"!=typeof t){if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0===(t=r))throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return t}function c(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(e){}return(c=function(){return!!e})()}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e,t){return(f=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}o.AdvancedLayoutDialog=(e=>{function o(e,t){var n;if(this instanceof o)return(n=u(this,o,[e])).tuxboard=t,n.dragX=0,n.dragY=0,n.isDraggingStarted=!1,n.initialize=function(){n.getDom().addEventListener("shown.bs.modal",function(){return n.loadDialog()})},n.loadDialog=function(){n.getService().getAdvancedLayoutDialog().then(function(e){n.getDom().querySelector(".modal-body").innerHTML=e,n.attachEvents(),n.clearErrorMessage()})},n.getService=function(){return n.tuxboard.getService()},n.getDropdownTypes=function(){return n.getDialog().querySelector(i.defaultDropdownLayoutTypesSelector)},n.getDropdownItems=function(){return n.getLayoutList().querySelectorAll(i.defaultDropdownLayoutRowTypeSelector)},n.getLayoutList=function(){return n.getDialog().querySelector(i.defaultLayoutRowListSelector)},n.getLayoutListItems=function(){return n.getLayoutList().querySelectorAll(i.defaultLayoutRowItemSelector)},n.getLayoutListPlaceholders=function(){return n.getLayoutList().querySelectorAll(i.defaultLayoutRowPlaceholderSelector)},n.getLayoutListHandle=function(){return n.getDialog().querySelector(i.defaultLayoutRowItemHandleSelector)},n.getDeleteButtons=function(){return n.getDialog().querySelectorAll(i.defaultDeleteRowLayoutButtonSelector)},n.getSaveLayoutButton=function(){return n.getDialog().querySelector(i.defaultSaveAdvancedLayoutButtonSelector)},n.canDelete=function(){return 2<=n.getLayoutList().querySelectorAll("li").length},n.getErrorContainer=function(){return n.getDom().querySelector(".error-container")},n.getErrorMessage=function(){return n.getErrorContainer().querySelector(".error-message")},n.attachEvents=function(){n.initLayoutDragAndDrop();var e=n.getDeleteButtons(),t=(n.attachDeleteEvents(e),n.getDropdownTypes()),e=(t.onchange=function(){var e=+t.selectedOptions[0].value;t.value="0",n.getService().getLayoutType(e).then(function(e){return n.addNewRow(e)})},n.getSaveLayoutButton());null!=e&&e.removeEventListener("click",n.saveLayout),null!=e&&e.addEventListener("click",n.saveLayout)},n.getLayoutModel=function(){var e=n.tuxboard.getTab().getCurrentTabId(),r=new Array;return[].forEach.call(n.getLayoutListItems(),function(e,t){var o=+e.getAttribute("data-row-type"),e=(e=e.getAttribute(i.dataIdAttribute))||"0";r.push(new a.LayoutItem(t,e,o))}),new s.LayoutModel(r,e)},n.saveLayout=function(){var e=n.getLayoutModel();n.getService().saveAdvancedLayout(e).then(function(e){n.tuxboard.updateDashboard(e),n.hideDialog()})},n.deleteRowEvent=function(e){var t,o=e.target.closest("li"),e=n.tuxboard.getTab().getCurrentTabId();n.clearErrorMessage(),o&&n.canDelete()&&(t=o.getAttribute(i.dataIdAttribute),n.getService().canDeleteLayoutRow(e,t).then(function(e){return e.ok&&(n.clearErrorMessage(),o.remove()),e}).then(function(e){return e.json()}).then(function(e){e&&""!==e.message&&n.setErrorMessage(e.message)}))},n.setErrorMessage=function(e){var t,o=n.getErrorContainer();o&&(t=n.getErrorMessage())&&(t.innerHTML=e,(0,i.showElement)(o))},n.clearErrorMessage=function(){var e=n.getErrorContainer();e&&(0,i.hideElement)(e)},n.attachDeleteEvents=function(e){[].forEach.call(e,function(e){e.removeEventListener("click",n.deleteRowEvent,!1),e.addEventListener("click",n.deleteRowEvent,!1)})},n.addNewRow=function(e){var t;e&&(t=n.getLayoutList())&&(t.append((0,i.createNodesFromHtml)(e)),n.initLayoutDragAndDrop(),e=t.querySelector("li:last-child"))&&(t=e.querySelectorAll(i.defaultDeleteRowLayoutButtonSelector),n.attachDeleteEvents(t))},n.handleMouseDown=function(e){var t=e.target,t=(n.draggingElement=t.closest("li"),n.draggingElement.getBoundingClientRect());n.dragX=e.pageX-t.left,n.dragY=e.pageY-t.top,document.addEventListener("mousemove",n.handleMouseMove),document.addEventListener("mouseup",n.handleMouseUp)},n.handleMouseUp=function(e){n.placeHolder&&n.placeHolder.parentNode.removeChild(n.placeHolder),n.isDraggingStarted=!1,n.draggingElement.style.removeProperty("top"),n.draggingElement.style.removeProperty("left"),n.draggingElement.style.removeProperty("position"),n.draggingElement.style.width="100%",n.dragX=null,n.dragY=null,n.draggingElement=null,document.removeEventListener("mousemove",n.handleMouseMove),document.removeEventListener("mouseup",n.handleMouseUp)},n.handleMouseMove=function(e){var t=n.draggingElement.getBoundingClientRect(),o=n.getLayoutList().getBoundingClientRect(),t=(n.isDraggingStarted||(n.isDraggingStarted=!0,n.placeHolder||(n.placeHolder=n.createPlaceholder()),n.draggingElement.parentNode.insertBefore(n.placeHolder,n.draggingElement.nextSibling),n.placeHolder.style.height="".concat(t.height,"px")),n.draggingElement.style.position="absolute",n.draggingElement.style.top="".concat((e.pageY-n.dragY)/2,"px"),n.draggingElement.style.left=o.left,n.draggingElement.style.width="75%",n.draggingElement.previousElementSibling),e=n.placeHolder.nextElementSibling;t&&n.isAbove(n.draggingElement,t)&&(n.swap(n.placeHolder,n.draggingElement),n.swap(n.placeHolder,t)),e&&n.isAbove(e,n.draggingElement)&&(n.swap(e,n.placeHolder),n.swap(e,n.draggingElement))},n.swap=function(e,t){var o=e.parentNode,r=e.nextSibling===t?e:e.nextSibling;t.parentNode.insertBefore(e,t),o.insertBefore(t,r)},n.isAbove=function(e,t){e=e.getBoundingClientRect(),t=t.getBoundingClientRect();return e.top+e.height/2<t.top+t.height/2},n.createPlaceholder=function(){var e=document.createElement("li");return e.classList.add("placeholder"),e.innerHTML="&nbsp;",e},n.initLayoutDragAndDrop=function(){var e=n.getLayoutListItems();[].forEach.call(e,function(e){e.querySelector(i.defaultLayoutRowItemHandleSelector).addEventListener("mousedown",function(e){return n.handleMouseDown(e)},!1)})},n.initialize(),n;throw new TypeError("Cannot call a class as a function")}var t,r,n=o;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");return n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),Object.defineProperty(n,"prototype",{writable:!1}),e&&f(n,e),n=o,t&&l(n.prototype,t),r&&l(n,r),Object.defineProperty(n,"prototype",{writable:!1}),n})(r.BaseDialog)},{"../../common":4,"../BaseDialog":5,"./LayoutItem":8,"./LayoutModel":9}],8:[function(e,t,o){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(e=>(e=((e,t)=>{if("object"!=n(e)||!e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===t?String:Number)(e);if("object"!=n(o=o.call(e,t||"default")))return o;throw new TypeError("@@toPrimitive must return a primitive value.")})(e,"string"),"symbol"==n(e)?e:e+""))(r.key),r)}}function i(e,t,o){return t&&r(e.prototype,t),o&&r(e,o),Object.defineProperty(e,"prototype",{writable:!1}),e}Object.defineProperty(o,"__esModule",{value:!0}),o.LayoutItem=void 0;o.LayoutItem=i(function e(t,o,r){if(!(this instanceof e))throw new TypeError("Cannot call a class as a function");this.Index=t,this.LayoutRowId=o,this.TypeId=r})},{}],9:[function(e,t,o){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(e=>(e=((e,t)=>{if("object"!=n(e)||!e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===t?String:Number)(e);if("object"!=n(o=o.call(e,t||"default")))return o;throw new TypeError("@@toPrimitive must return a primitive value.")})(e,"string"),"symbol"==n(e)?e:e+""))(r.key),r)}}function i(e,t,o){return t&&r(e.prototype,t),o&&r(e,o),Object.defineProperty(e,"prototype",{writable:!1}),e}Object.defineProperty(o,"__esModule",{value:!0}),o.LayoutModel=void 0;o.LayoutModel=i(function e(t,o){if(!(this instanceof e))throw new TypeError("Cannot call a class as a function");this.LayoutList=t,this.TabId=o})},{}],10:[function(e,t,o){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(o,"__esModule",{value:!0}),o.SimpleLayoutDialog=void 0;var i=e("../../common"),e=e("../BaseDialog");function a(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(e=>(e=((e,t)=>{if("object"!=n(e)||!e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===t?String:Number)(e);if("object"!=n(o=o.call(e,t||"default")))return o;throw new TypeError("@@toPrimitive must return a primitive value.")})(e,"string"),"symbol"==n(e)?e:e+""))(r.key),r)}}function s(e,t,o){t=u(t);var r=e,t=l()?Reflect.construct(t,o||[],u(e).constructor):t.apply(e,o);if(!t||"object"!=n(t)&&"function"!=typeof t){if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0===(t=r))throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return t}function l(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(e){}return(l=function(){return!!e})()}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){return(c=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}o.SimpleLayoutDialog=(e=>{function r(e,t){var o;if(this instanceof r)return(o=s(this,r,[e])).tuxboard=t,o.initialize=function(){o.getDom().addEventListener("shown.bs.modal",function(){return o.loadDialog()})},o.getService=function(){return o.tuxboard.getService()},o.getSaveLayoutButton=function(){return o.getDom().querySelector(i.defaultSaveLayoutButtonSelector)},o.getLayoutList=function(){return o.getDom().querySelector(i.defaultLayoutListSelector)},o.getLayoutItems=function(){return o.getLayoutList().querySelectorAll(i.defaultLayoutItemSelector)},o.loadDialog=function(){o.getService().getSimpleLayoutDialog().then(function(e){o.getDom().querySelector(".modal-body").innerHTML=e,o.attachEvents()})},o.getSelected=function(){return o.getDom().querySelector("li.selected")},o.getSelectedId=function(){return o.getSelected().getAttribute("data-id")},o.getLayoutRowId=function(){var e=o.tuxboard.getTab();return o.tuxboard.getLayoutRowCollection(e)[0].getLayoutRowId()},o.clearSelected=function(){Array.from(o.getLayoutItems()).forEach(function(e){e.classList.remove("selected")})},o.attachEvents=function(){var e=o.getLayoutItems(),e=(Array.from(e).forEach(function(e){null!=e&&e.removeEventListener("click",function(){o.listItemOnClick(e)}),null!=e&&e.addEventListener("click",function(){o.listItemOnClick(e)})}),o.getSaveLayoutButton());null!=e&&e.removeEventListener("click",o.saveLayoutClick),null!=e&&e.addEventListener("click",o.saveLayoutClick)},o.listItemOnClick=function(e){o.clearSelected(),e.classList.add("selected")},o.saveLayoutClick=function(e){e.preventDefault(),o.saveLayout()},o.saveLayout=function(){var e=o.getLayoutRowId();o.getService().saveSimpleLayout(e,o.getSelectedId()).then(function(e){o.dashboardData=e,o.hideDialog()})},o.initialize(),o;throw new TypeError("Cannot call a class as a function")}var t,o,n=r;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");return n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),Object.defineProperty(n,"prototype",{writable:!1}),e&&c(n,e),n=r,t&&a(n.prototype,t),o&&a(n,o),Object.defineProperty(n,"prototype",{writable:!1}),n})(e.BaseDialog)},{"../../common":4,"../BaseDialog":5}],11:[function(e,t,o){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(e=>(e=((e,t)=>{if("object"!=n(e)||!e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===t?String:Number)(e);if("object"!=n(o=o.call(e,t||"default")))return o;throw new TypeError("@@toPrimitive must return a primitive value.")})(e,"string"),"symbol"==n(e)?e:e+""))(r.key),r)}}function i(e,t,o){return t&&r(e.prototype,t),o&&r(e,o),Object.defineProperty(e,"prototype",{writable:!1}),e}Object.defineProperty(o,"__esModule",{value:!0}),o.PlacementItem=void 0;o.PlacementItem=i(function e(t,o,r,n){var i=4<arguments.length&&void 0!==arguments[4]&&arguments[4],a=this,s=e;if(!(a instanceof s))throw new TypeError("Cannot call a class as a function");this.placementId=t,this.index=o,this.layoutRowId=r,this.columnIndex=n,this.isStatic=i})},{}],12:[function(e,t,o){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(e=>(e=((e,t)=>{if("object"!=n(e)||!e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===t?String:Number)(e);if("object"!=n(o=o.call(e,t||"default")))return o;throw new TypeError("@@toPrimitive must return a primitive value.")})(e,"string"),"symbol"==n(e)?e:e+""))(r.key),r)}}function i(e,t,o){return t&&r(e.prototype,t),o&&r(e,o),Object.defineProperty(e,"prototype",{writable:!1}),e}Object.defineProperty(o,"__esModule",{value:!0}),o.WidgetProperties=void 0;o.WidgetProperties=i(function e(t,o,r,n){if(!(this instanceof e))throw new TypeError("Cannot call a class as a function");this.placementId=t,this.columnIndex=o,this.index=r,this.layoutRowId=n})},{}],13:[function(e,t,o){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(e=>(e=((e,t)=>{if("object"!=n(e)||!e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===t?String:Number)(e);if("object"!=n(o=o.call(e,t||"default")))return o;throw new TypeError("@@toPrimitive must return a primitive value.")})(e,"string"),"symbol"==n(e)?e:e+""))(r.key),r)}}function i(e,t,o){return t&&r(e.prototype,t),o&&r(e,o),Object.defineProperty(e,"prototype",{writable:!1}),e}Object.defineProperty(o,"__esModule",{value:!0}),o.DragWidgetInfo=void 0;o.DragWidgetInfo=i(function e(t,o,r,n,i){if(!(this instanceof e))throw new TypeError("Cannot call a class as a function");this.placementId=t,this.currentColumnIndex=o,this.currentLayoutRowId=r,this.previousColumnIndex=n,this.previousLayoutRowId=i})},{}],14:[function(e,t,o){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(o,"__esModule",{value:!0}),o.Column=void 0;var r=e("../common"),i=e("../widget/widgetCollection");function a(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(e=>(e=((e,t)=>{if("object"!=n(e)||!e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===t?String:Number)(e);if("object"!=n(o=o.call(e,t||"default")))return o;throw new TypeError("@@toPrimitive must return a primitive value.")})(e,"string"),"symbol"==n(e)?e:e+""))(r.key),r)}}function s(e,t,o){return t&&a(e.prototype,t),o&&a(e,o),Object.defineProperty(e,"prototype",{writable:!1}),e}o.Column=s(function e(t){var o=this;if(!(this instanceof e))throw new TypeError("Cannot call a class as a function");this.parent=t,this.selector=r.defaultColumnSelector,this.getDom=function(){return o.parent},this.getAttributeName=function(){return r.dataIdAttribute},this.getIndex=function(){return o.index},this.setIndex=function(e){return o.index=e},this.setLayoutRowId=function(e){return o.layoutRowId=e},this.getSelector=function(){return o.selector},this.getColumnSelector=function(){return"".concat(o.selector,":nth-child(").concat(o.index+1,")")},this.getWidgetCollection=function(){return new i.WidgetCollection(o.parent,o.index,o.layoutRowId)}})},{"../common":4,"../widget/widgetCollection":32}],15:[function(e,t,o){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(o,"__esModule",{value:!0}),o.LayoutRow=void 0;var i=e("../common"),a=e("./columnCollection");function r(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(e=>(e=((e,t)=>{if("object"!=n(e)||!e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===t?String:Number)(e);if("object"!=n(o=o.call(e,t||"default")))return o;throw new TypeError("@@toPrimitive must return a primitive value.")})(e,"string"),"symbol"==n(e)?e:e+""))(r.key),r)}}function s(e,t,o){return t&&r(e.prototype,t),o&&r(e,o),Object.defineProperty(e,"prototype",{writable:!1}),e}o.LayoutRow=s(function e(t,o){var r=this;if(!(this instanceof e))throw new TypeError("Cannot call a class as a function");this.parent=t,this.layoutRowId=o,this.selector=i.defaultLayoutRowSelector,this.getDom=function(){return r.layoutRow||(r.layoutRow=r.parent.querySelector(r.getSelector())),r.layoutRow},this.getColumns=function(){return new a.ColumnCollection(r.getDom(),r.id).fromLayoutRow()},this.getLayoutRowId=function(){return r.id},this.getAttributeName=function(){return i.dataIdAttribute},this.setIndex=function(e){return r.index=e},this.getSelector=function(){return"".concat(r.selector,"[").concat(r.getAttributeName(),"='").concat(r.id,"']")},this.id=o})},{"../common":4,"./columnCollection":16}],16:[function(e,t,o){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(o,"__esModule",{value:!0}),o.ColumnCollection=void 0;var i=e("../common"),a=e("./Column");function r(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(e=>(e=((e,t)=>{if("object"!=n(e)||!e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===t?String:Number)(e);if("object"!=n(o=o.call(e,t||"default")))return o;throw new TypeError("@@toPrimitive must return a primitive value.")})(e,"string"),"symbol"==n(e)?e:e+""))(r.key),r)}}function s(e,t,o){return t&&r(e.prototype,t),o&&r(e,o),Object.defineProperty(e,"prototype",{writable:!1}),e}o.ColumnCollection=s(function e(t,o){var r=this;if(!(this instanceof e))throw new TypeError("Cannot call a class as a function");this.parent=t,this.layoutRowId=o,this.selector=i.defaultColumnSelector,this.columns=Array.from(this.parent.querySelectorAll(this.selector)),this.fromLayoutRow=function(){return r.columns.map(function(e,t){return r.toColumn(e,t)})},this.toColumn=function(e,t){e=new a.Column(e);return e.setIndex(t),e.setLayoutRowId(r.layoutRowId),e}})},{"../common":4,"./Column":14}],17:[function(e,t,o){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(o,"__esModule",{value:!0}),o.Layout=void 0;var r=e("./layoutRowCollection"),i=e("../common");function a(e){return(e=>{if(Array.isArray(e))return s(e)})(e)||(e=>{if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)})(e)||((e,t)=>{var o;if(e)return"string"==typeof e?s(e,t):"Map"===(o="Object"===(o={}.toString.call(e).slice(8,-1))&&e.constructor?e.constructor.name:o)||"Set"===o?Array.from(e):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?s(e,t):void 0})(e)||(()=>{throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")})()}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var o=0,r=Array(t);o<t;o++)r[o]=e[o];return r}function l(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(e=>(e=((e,t)=>{if("object"!=n(e)||!e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===t?String:Number)(e);if("object"!=n(o=o.call(e,t||"default")))return o;throw new TypeError("@@toPrimitive must return a primitive value.")})(e,"string"),"symbol"==n(e)?e:e+""))(r.key),r)}}function u(e,t,o){return t&&l(e.prototype,t),o&&l(e,o),Object.defineProperty(e,"prototype",{writable:!1}),e}o.Layout=u(function e(t){var o=this;if(!(this instanceof e))throw new TypeError("Cannot call a class as a function");this.parent=t,this.layoutRows=new r.LayoutRowCollection(this.parent),this.selector=i.defaultLayoutRowSelector,this.getLayoutRows=function(){if(o.layoutRows)return o.layoutRows.getLayoutRows();throw new Error("No layout rows were found.")},this.getFirstLayoutRow=function(){return o.layoutRows?o.layoutRows.getLayoutRows()[0]:null},this.getWidgetPlacements=function(){var t=[];return o.getLayoutRows().map(function(e){e.getColumns().map(function(e){e=e.getWidgetCollection().getWidgets();t.push.apply(t,a(e))})}),t}})},{"../common":4,"./layoutRowCollection":18}],18:[function(e,t,o){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(o,"__esModule",{value:!0}),o.LayoutRowCollection=void 0;var r=e("../common"),i=e("./LayoutRow");function a(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(e=>(e=((e,t)=>{if("object"!=n(e)||!e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===t?String:Number)(e);if("object"!=n(o=o.call(e,t||"default")))return o;throw new TypeError("@@toPrimitive must return a primitive value.")})(e,"string"),"symbol"==n(e)?e:e+""))(r.key),r)}}function s(e,t,o){return t&&a(e.prototype,t),o&&a(e,o),Object.defineProperty(e,"prototype",{writable:!1}),e}o.LayoutRowCollection=s(function e(t){var o=this;if(!(this instanceof e))throw new TypeError("Cannot call a class as a function");this.parent=t,this.selector=r.defaultLayoutRowSelector,this.layoutRows=this.parent.querySelectorAll(this.selector),this.getLayoutRows=function(){return Array.from(o.layoutRows).map(function(e,t){return o.createLayoutRow(e,t)})},this.createLayoutRow=function(e,t){e=e.getAttribute(r.dataIdAttribute),e=new i.LayoutRow(o.parent,e);return e.setIndex(t),e}})},{"../common":4,"./LayoutRow":15}],19:[function(e,t,o){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(o,"__esModule",{value:!0}),o.Tab=void 0;var r=e("../common"),i=e("./layout");function a(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(e=>(e=((e,t)=>{if("object"!=n(e)||!e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===t?String:Number)(e);if("object"!=n(o=o.call(e,t||"default")))return o;throw new TypeError("@@toPrimitive must return a primitive value.")})(e,"string"),"symbol"==n(e)?e:e+""))(r.key),r)}}function s(e,t,o){return t&&a(e.prototype,t),o&&a(e,o),Object.defineProperty(e,"prototype",{writable:!1}),e}o.Tab=s(function e(t){var o=this;if(!(this instanceof e))throw new TypeError("Cannot call a class as a function");this.parent=t,this.selector=r.defaultTabSelector,this.tab=this.parent.querySelector(this.selector),this.getDom=function(){return o.tab},this.getLayout=function(){return new i.Layout(o.getDom())},this.getCurrentTab=function(){return o.tab},this.getCurrentTabId=function(){return o.getCurrentTab().getAttribute(r.dataIdAttribute)},this.getLayoutRows=function(){return new i.Layout(o.getDom()).getLayoutRows()}})},{"../common":4,"./layout":17}],20:[function(e,t,o){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(e=>(e=((e,t)=>{if("object"!=n(e)||!e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===t?String:Number)(e);if("object"!=n(o=o.call(e,t||"default")))return o;throw new TypeError("@@toPrimitive must return a primitive value.")})(e,"string"),"symbol"==n(e)?e:e+""))(r.key),r)}}Object.defineProperty(o,"__esModule",{value:!0}),o.BaseService=void 0;o.BaseService=(()=>{return e=function e(){var t=0<arguments.length&&void 0!==arguments[0]&&arguments[0],o=this,r=e;if(!(o instanceof r))throw new TypeError("Cannot call a class as a function");this.debug=t},(t=[{key:"validateResponse",value:function(e){if(e.ok)return e;throw e="".concat(e.status," - ").concat(e.statusText),Error(e)}},{key:"readResponseAsJson",value:function(e){return e.json()}},{key:"readResponseAsText",value:function(e){return e.text()}},{key:"logError",value:function(e){}},{key:"getToken",value:function(){var e=document.querySelector('input[name="__RequestVerificationToken"]');return e?e.getAttribute("value"):""}}])&&r(e.prototype,t),o&&r(e,o),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t,o})()},{}],21:[function(e,t,o){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(o,"__esModule",{value:!0}),o.TuxboardService=void 0;e=e("./BaseService");function i(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(e=>(e=((e,t)=>{if("object"!=n(e)||!e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===t?String:Number)(e);if("object"!=n(o=o.call(e,t||"default")))return o;throw new TypeError("@@toPrimitive must return a primitive value.")})(e,"string"),"symbol"==n(e)?e:e+""))(r.key),r)}}function a(e,t,o){t=l(t);var r=e,t=s()?Reflect.construct(t,o||[],l(e).constructor):t.apply(e,o);if(!t||"object"!=n(t)&&"function"!=typeof t){if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0===(t=r))throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return t}function s(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(e){}return(s=function(){return!!e})()}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){return(u=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}o.TuxboardService=(e=>{function n(){var o,e=0<arguments.length&&void 0!==arguments[0]&&arguments[0],t=this,r=n;if(t instanceof r)return(o=a(this,n,[e])).tuxWidgetPlacementUrl="?handler=SaveWidgetPosition",o.tuxRefreshUrl="?handler=Refresh",o.tuxSimpleLayoutDialogUrl="?handler=SimpleLayoutDialog",o.tuxSaveSimpleLayoutUrl="?handler=SaveSimpleLayout",o.tuxAdvancedLayoutDialogUrl="?handler=AdvancedLayoutDialog",o.tuxGetLayoutTypeUrl="?handler=GetLayoutType",o.tuxSaveAdvancedLayoutUrl="?handler=SaveAdvancedLayout",o.tuxCanDeleteLayoutRowUrl="?handler=CanDeleteLayoutRow",o.tuxAddWidgetDialogUrl="?handler=AddWidgetsDialog",o.tuxAddWidgetUrl="?handler=AddWidget",o.tuxRemoveWidgetUrl="?handler=RemoveWidget",o.tuxSetWidgetStateUrl="?handler=SetWidgetState",o.saveWidgetPlacement=function(e,t){t={PlacementId:t.placementId,PreviousLayoutRowId:t.previousLayoutRowId,PreviousColumn:t.previousColumnIndex,CurrentLayoutRowId:t.currentLayoutRowId,CurrentColumn:t.currentColumnIndex,PlacementList:t.placementList},t=new Request(o.tuxWidgetPlacementUrl,{method:"post",body:JSON.stringify(t),headers:{"Content-Type":"application/json",RequestVerificationToken:o.getToken()}});return fetch(t).then(o.validateResponse).catch(o.logError)},o.refresh=function(){var e=new Request(o.tuxRefreshUrl,{method:"post",headers:{"Content-Type":"application/json",RequestVerificationToken:o.getToken()}});return fetch(e).then(o.validateResponse).then(o.readResponseAsText).catch(o.logError)},o.getSimpleLayoutDialog=function(){var e=new Request(o.tuxSimpleLayoutDialogUrl,{method:"post",headers:{"Content-Type":"application/json",RequestVerificationToken:o.getToken()}});return fetch(e).then(o.validateResponse).then(o.readResponseAsText).catch(o.logError)},o.saveSimpleLayout=function(e,t){e=new Request(o.tuxSaveSimpleLayoutUrl,{method:"post",body:JSON.stringify({LayoutRowId:e,LayoutTypeId:t}),headers:{"Content-Type":"application/json",RequestVerificationToken:o.getToken()}});return fetch(e).then(o.validateResponse).then(o.readResponseAsText).catch(o.logError)},o.getAdvancedLayoutDialog=function(){var e=new Request(o.tuxAdvancedLayoutDialogUrl,{method:"post",headers:{"Content-Type":"application/json",RequestVerificationToken:o.getToken()}});return fetch(e).then(o.validateResponse).then(o.readResponseAsText).catch(o.logError)},o.getLayoutType=function(e){e=new Request(o.tuxGetLayoutTypeUrl,{method:"post",body:JSON.stringify({id:e}),headers:{"Content-Type":"application/json",RequestVerificationToken:o.getToken()}});return fetch(e).then(o.validateResponse).then(o.readResponseAsText).catch(o.logError)},o.saveAdvancedLayout=function(e){e={TabId:e.TabId,LayoutList:e.LayoutList},e=new Request(o.tuxSaveAdvancedLayoutUrl,{method:"post",body:JSON.stringify(e),headers:{"Content-Type":"application/json",RequestVerificationToken:o.getToken()}});return fetch(e).then(o.validateResponse).then(o.readResponseAsText).catch(o.logError)},o.canDeleteLayoutRow=function(e,t){e=new Request(o.tuxCanDeleteLayoutRowUrl,{method:"post",body:JSON.stringify({tabId:e,layoutRowId:t}),headers:{"Content-Type":"application/json",RequestVerificationToken:o.getToken()}});return fetch(e)},o.getAddWidgetDialog=function(){var e=new Request(o.tuxAddWidgetDialogUrl,{method:"post",headers:{"Content-Type":"application/json",RequestVerificationToken:o.getToken()}});return fetch(e).then(o.validateResponse).then(o.readResponseAsText).catch(o.logError)},o.addWidget=function(e){e=new Request(o.tuxAddWidgetUrl,{method:"post",body:JSON.stringify({WidgetId:e}),headers:{"Content-Type":"application/json",RequestVerificationToken:o.getToken()}});return fetch(e).then(o.validateResponse).then(o.readResponseAsText).catch(o.logError)},o.removeWidget=function(e){e=new Request(o.tuxRemoveWidgetUrl,{method:"post",body:JSON.stringify({WidgetId:e}),headers:{"Content-Type":"application/json",RequestVerificationToken:o.getToken()}});return fetch(e)},o.setWidgetState=function(e,t){e=new Request(o.tuxSetWidgetStateUrl,{method:"post",body:JSON.stringify({WidgetPlacementId:e,Collapsed:t}),headers:{"Content-Type":"application/json",RequestVerificationToken:o.getToken()}});return fetch(e)},o;throw new TypeError("Cannot call a class as a function")}var t,o,r=n;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");return r.prototype=Object.create(e&&e.prototype,{constructor:{value:r,writable:!0,configurable:!0}}),Object.defineProperty(r,"prototype",{writable:!1}),e&&u(r,e),r=n,t&&i(r.prototype,t),o&&i(r,o),Object.defineProperty(r,"prototype",{writable:!1}),r})(e.BaseService)},{"./BaseService":20}],22:[function(e,t,o){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(o,"__esModule",{value:!0}),o.AddWidgetButton=void 0;var r=e("./TuxbarButton"),i=e("../common"),a=e("../dialog/addWidget/AddWidgetDialog");function s(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(e=>(e=((e,t)=>{if("object"!=n(e)||!e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===t?String:Number)(e);if("object"!=n(o=o.call(e,t||"default")))return o;throw new TypeError("@@toPrimitive must return a primitive value.")})(e,"string"),"symbol"==n(e)?e:e+""))(r.key),r)}}function l(e,t,o){t=c(t);var r=e,t=u()?Reflect.construct(t,o||[],c(e).constructor):t.apply(e,o);if(!t||"object"!=n(t)&&"function"!=typeof t){if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0===(t=r))throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return t}function u(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(e){}return(u=function(){return!!e})()}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e,t){return(d=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}o.AddWidgetButton=(e=>{function r(e,t){var o;if(!(this instanceof r))throw new TypeError("Cannot call a class as a function");(o=l(this,r,[e,t])).onClick=function(e){var t=new a.AddWidgetDialog(i.defaultAddWidgetDialogSelector,o.tuxBar.getTuxboard());t&&(t.getDom().removeEventListener("hide.bs.modal",function(){return o.refresh(t)},!1),t.getDom().addEventListener("hide.bs.modal",function(){return o.refresh(t)},!1),t.showDialog())},o.refresh=function(e){e.allowRefresh&&o.tuxBar.getTuxboard().refresh()},o.getDom=function(){return o.tuxBar.getDom().querySelector(o.selector)};e=o.getDom();return null!=e&&e.removeEventListener("click",o.onClick,!1),null!=e&&e.addEventListener("click",o.onClick,!1),o}var t,o,n=r;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");return n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),Object.defineProperty(n,"prototype",{writable:!1}),e&&d(n,e),n=r,t&&s(n.prototype,t),o&&s(n,o),Object.defineProperty(n,"prototype",{writable:!1}),n})(r.TuxbarButton)},{"../common":4,"../dialog/addWidget/AddWidgetDialog":6,"./TuxbarButton":26}],23:[function(e,t,o){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(o,"__esModule",{value:!0}),o.AdvancedLayoutButton=void 0;var r=e("./TuxbarButton"),i=e("../common"),a=e("../dialog/advancedLayout/AdvancedLayoutDialog");function s(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(e=>(e=((e,t)=>{if("object"!=n(e)||!e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===t?String:Number)(e);if("object"!=n(o=o.call(e,t||"default")))return o;throw new TypeError("@@toPrimitive must return a primitive value.")})(e,"string"),"symbol"==n(e)?e:e+""))(r.key),r)}}function l(e,t,o){t=c(t);var r=e,t=u()?Reflect.construct(t,o||[],c(e).constructor):t.apply(e,o);if(!t||"object"!=n(t)&&"function"!=typeof t){if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0===(t=r))throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return t}function u(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(e){}return(u=function(){return!!e})()}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e,t){return(d=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}o.AdvancedLayoutButton=(e=>{function r(e,t){var o;if(!(this instanceof r))throw new TypeError("Cannot call a class as a function");(o=l(this,r,[e,t])).onClick=function(e){var t=new a.AdvancedLayoutDialog(i.defaultAdvancedLayoutDialogSelector,o.tuxBar.getTuxboard());t&&(t.getDom().removeEventListener("hide.bs.modal",function(){return o.hideAdvancedLayout(t)},!1),t.getDom().addEventListener("hide.bs.modal",function(){return o.hideAdvancedLayout(t)},!1),t.showDialog())},o.hideAdvancedLayout=function(e){o.tuxBar.getTuxboard().updateDashboard(e.dashboardData)},o.getDom=function(){return o.tuxBar.getDom().querySelector(o.selector)};e=o.getDom();return null!=e&&e.removeEventListener("click",o.onClick,!1),null!=e&&e.addEventListener("click",o.onClick,!1),o}var t,o,n=r;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");return n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),Object.defineProperty(n,"prototype",{writable:!1}),e&&d(n,e),n=r,t&&s(n.prototype,t),o&&s(n,o),Object.defineProperty(n,"prototype",{writable:!1}),n})(r.TuxbarButton)},{"../common":4,"../dialog/advancedLayout/AdvancedLayoutDialog":7,"./TuxbarButton":26}],24:[function(e,t,o){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(o,"__esModule",{value:!0}),o.RefreshButton=void 0;var r=e("./TuxbarButton"),i=e("../common");function a(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(e=>(e=((e,t)=>{if("object"!=n(e)||!e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===t?String:Number)(e);if("object"!=n(o=o.call(e,t||"default")))return o;throw new TypeError("@@toPrimitive must return a primitive value.")})(e,"string"),"symbol"==n(e)?e:e+""))(r.key),r)}}function s(e,t,o){t=u(t);var r=e,t=l()?Reflect.construct(t,o||[],u(e).constructor):t.apply(e,o);if(!t||"object"!=n(t)&&"function"!=typeof t){if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0===(t=r))throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return t}function l(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(e){}return(l=function(){return!!e})()}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){return(c=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}o.RefreshButton=(e=>{function r(e,t){var o;if(!(this instanceof r))throw new TypeError("Cannot call a class as a function");(o=s(this,r,[e,t])).onClick=function(e){var t=o.tuxBar.get(i.defaultTuxbarSpinnerSelector);null!=t&&t.show();try{o.tuxBar.getTuxboard().refresh()}finally{null!=t&&t.hide()}},o.getDom=function(){return o.tuxBar.getDom().querySelector(o.selector)};e=o.getDom();return null!=e&&e.removeEventListener("click",o.onClick,!1),null!=e&&e.addEventListener("click",o.onClick,!1),o}var t,o,n=r;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");return n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),Object.defineProperty(n,"prototype",{writable:!1}),e&&c(n,e),n=r,t&&a(n.prototype,t),o&&a(n,o),Object.defineProperty(n,"prototype",{writable:!1}),n})(r.TuxbarButton)},{"../common":4,"./TuxbarButton":26}],25:[function(e,t,o){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(o,"__esModule",{value:!0}),o.Tuxbar=void 0;var i=e("../common"),a=e("./RefreshButton"),s=e("./TuxbarMessage"),l=e("./TuxbarSpinner"),u=e("./simpleLayoutButton"),c=e("./AdvancedLayoutButton"),d=e("./AddWidgetButton");function r(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(e=>(e=((e,t)=>{if("object"!=n(e)||!e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===t?String:Number)(e);if("object"!=n(o=o.call(e,t||"default")))return o;throw new TypeError("@@toPrimitive must return a primitive value.")})(e,"string"),"symbol"==n(e)?e:e+""))(r.key),r)}}function f(e,t,o){return t&&r(e.prototype,t),o&&r(e,o),Object.defineProperty(e,"prototype",{writable:!1}),e}o.Tuxbar=f(function e(t,o){var r=this;if(!(this instanceof e))throw new TypeError("Cannot call a class as a function");this.tuxboard=t,this.selector=o,this.controls=[],this.getDom=function(){return document.querySelector(r.selector)},this.getTuxboard=function(){return r.tuxboard},this.getTuxboardService=function(){return r.getTuxboard().getService()},this.get=function(t){return r.controls.find(function(e){return e.selector===t})},this.initialize=function(){r.controls.push(new a.RefreshButton(r,i.defaultTuxbarRefreshButton)),r.controls.push(new d.AddWidgetButton(r,i.defaultAddWidgetButton)),r.controls.push(new u.SimpleLayoutButton(r,i.defaultSimpleLayoutButton)),r.controls.push(new c.AdvancedLayoutButton(r,i.defaultAdvancedLayoutButton)),r.controls.push(new s.TuxbarMessage(r,i.defaultTuxbarMessageSelector)),r.controls.push(new l.TuxbarSpinner(r,i.defaultTuxbarSpinnerSelector))}})},{"../common":4,"./AddWidgetButton":22,"./AdvancedLayoutButton":23,"./RefreshButton":24,"./TuxbarMessage":28,"./TuxbarSpinner":29,"./simpleLayoutButton":30}],26:[function(e,t,o){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(o,"__esModule",{value:!0}),o.TuxbarButton=void 0;e=e("./TuxbarControl");function i(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(e=>(e=((e,t)=>{if("object"!=n(e)||!e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===t?String:Number)(e);if("object"!=n(o=o.call(e,t||"default")))return o;throw new TypeError("@@toPrimitive must return a primitive value.")})(e,"string"),"symbol"==n(e)?e:e+""))(r.key),r)}}function a(e,t,o){t=l(t);var r=e,t=s()?Reflect.construct(t,o||[],l(e).constructor):t.apply(e,o);if(!t||"object"!=n(t)&&"function"!=typeof t){if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0===(t=r))throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return t}function s(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(e){}return(s=function(){return!!e})()}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){return(u=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}o.TuxbarButton=(e=>{function o(e,t){if(this instanceof o)return a(this,o,[e,t]);throw new TypeError("Cannot call a class as a function")}var t,r,n=o;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");return n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),Object.defineProperty(n,"prototype",{writable:!1}),e&&u(n,e),n=o,t&&i(n.prototype,t),r&&i(n,r),Object.defineProperty(n,"prototype",{writable:!1}),n})(e.TuxbarControl)},{"./TuxbarControl":27}],27:[function(e,t,o){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(e=>(e=((e,t)=>{if("object"!=n(e)||!e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===t?String:Number)(e);if("object"!=n(o=o.call(e,t||"default")))return o;throw new TypeError("@@toPrimitive must return a primitive value.")})(e,"string"),"symbol"==n(e)?e:e+""))(r.key),r)}}function i(e,t,o){return t&&r(e.prototype,t),o&&r(e,o),Object.defineProperty(e,"prototype",{writable:!1}),e}Object.defineProperty(o,"__esModule",{value:!0}),o.TuxbarControl=void 0;o.TuxbarControl=i(function e(t,o){if(!(this instanceof e))throw new TypeError("Cannot call a class as a function");this.tuxBar=t,this.selector=o})},{}],28:[function(e,t,o){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(o,"__esModule",{value:!0}),o.TuxbarMessage=void 0;e=e("./TuxbarControl");function i(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(e=>(e=((e,t)=>{if("object"!=n(e)||!e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===t?String:Number)(e);if("object"!=n(o=o.call(e,t||"default")))return o;throw new TypeError("@@toPrimitive must return a primitive value.")})(e,"string"),"symbol"==n(e)?e:e+""))(r.key),r)}}function a(e,t,o){t=l(t);var r=e,t=s()?Reflect.construct(t,o||[],l(e).constructor):t.apply(e,o);if(!t||"object"!=n(t)&&"function"!=typeof t){if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0===(t=r))throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return t}function s(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(e){}return(s=function(){return!!e})()}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){return(u=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}o.TuxbarMessage=(e=>{function o(e,t){var r;if(this instanceof o)return(r=a(this,o,[e,t])).getDom=function(){return r.tuxBar.getDom().querySelector(r.selector)},r.setMessage=function(e,t){var o=r.getDom();o&&(o.innerHTML=e)},r.clearMessage=function(){var e=r.getDom();e&&(e.innerHTML="")},r;throw new TypeError("Cannot call a class as a function")}var t,r,n=o;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");return n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),Object.defineProperty(n,"prototype",{writable:!1}),e&&u(n,e),n=o,t&&i(n.prototype,t),r&&i(n,r),Object.defineProperty(n,"prototype",{writable:!1}),n})(e.TuxbarControl)},{"./TuxbarControl":27}],29:[function(e,t,o){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(o,"__esModule",{value:!0}),o.TuxbarSpinner=void 0;var i=e("../common"),e=e("./TuxbarControl");function a(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(e=>(e=((e,t)=>{if("object"!=n(e)||!e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===t?String:Number)(e);if("object"!=n(o=o.call(e,t||"default")))return o;throw new TypeError("@@toPrimitive must return a primitive value.")})(e,"string"),"symbol"==n(e)?e:e+""))(r.key),r)}}function s(e,t,o){t=u(t);var r=e,t=l()?Reflect.construct(t,o||[],u(e).constructor):t.apply(e,o);if(!t||"object"!=n(t)&&"function"!=typeof t){if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0===(t=r))throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return t}function l(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(e){}return(l=function(){return!!e})()}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){return(c=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}o.TuxbarSpinner=(e=>{function r(e,t){var o;if(this instanceof r)return(o=s(this,r,[e,t])).getDom=function(){return o.tuxBar.getDom().querySelector(o.selector)},o.show=function(){(0,i.showElement)(o.getDom())},o.hide=function(){(0,i.hideElement)(o.getDom())},o;throw new TypeError("Cannot call a class as a function")}var t,o,n=r;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");return n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),Object.defineProperty(n,"prototype",{writable:!1}),e&&c(n,e),n=r,t&&a(n.prototype,t),o&&a(n,o),Object.defineProperty(n,"prototype",{writable:!1}),n})(e.TuxbarControl)},{"../common":4,"./TuxbarControl":27}],30:[function(e,t,o){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(o,"__esModule",{value:!0}),o.SimpleLayoutButton=void 0;var r=e("./TuxbarButton"),i=e("../common"),a=e("../dialog/simpleLayout/simpleLayoutDialog");function s(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(e=>(e=((e,t)=>{if("object"!=n(e)||!e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===t?String:Number)(e);if("object"!=n(o=o.call(e,t||"default")))return o;throw new TypeError("@@toPrimitive must return a primitive value.")})(e,"string"),"symbol"==n(e)?e:e+""))(r.key),r)}}function l(e,t,o){t=c(t);var r=e,t=u()?Reflect.construct(t,o||[],c(e).constructor):t.apply(e,o);if(!t||"object"!=n(t)&&"function"!=typeof t){if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0===(t=r))throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return t}function u(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(e){}return(u=function(){return!!e})()}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e,t){return(d=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}o.SimpleLayoutButton=(e=>{function r(e,t){var o;if(!(this instanceof r))throw new TypeError("Cannot call a class as a function");(o=l(this,r,[e,t])).onClick=function(e){var t=new a.SimpleLayoutDialog(i.defaultSimpleLayoutDialogSelector,o.tuxBar.getTuxboard());t&&(t.getDom().removeEventListener("hide.bs.modal",function(){return o.hideSimpleLayout(t)},!1),t.getDom().addEventListener("hide.bs.modal",function(){return o.hideSimpleLayout(t)},!1),t.showDialog())},o.hideSimpleLayout=function(e){o.tuxBar.getTuxboard().updateDashboard(e.dashboardData)},o.getDom=function(){return o.tuxBar.getDom().querySelector(o.selector)};e=o.getDom();return null!=e&&e.removeEventListener("click",o.onClick,!1),null!=e&&e.addEventListener("click",o.onClick,!1),o}var t,o,n=r;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");return n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),Object.defineProperty(n,"prototype",{writable:!1}),e&&d(n,e),n=r,t&&s(n.prototype,t),o&&s(n,o),Object.defineProperty(n,"prototype",{writable:!1}),n})(r.TuxbarButton)},{"../common":4,"../dialog/simpleLayout/simpleLayoutDialog":10,"./TuxbarButton":26}],31:[function(e,t,o){function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(o,"__esModule",{value:!0}),o.Tuxboard=void 0;var r=((e,t)=>{if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=a(e)&&"function"!=typeof e)return{default:e};if((t=d(t))&&t.has(e))return t.get(e);var o,r,n={__proto__:null},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(o in e)"default"!==o&&{}.hasOwnProperty.call(e,o)&&((r=i?Object.getOwnPropertyDescriptor(e,o):null)&&(r.get||r.set)?Object.defineProperty(n,o,r):n[o]=e[o]);return n.default=e,t&&t.set(e,n),n})(e("bootstrap")),n=e("./common"),s=e("./dto/dragWidgetInfo"),l=e("./models/tab"),u=e("./services/TuxboardService"),c=e("./widget/widgetCollection");function d(e){var t,o;return"function"!=typeof WeakMap?null:(t=new WeakMap,o=new WeakMap,(d=function(e){return e?o:t})(e))}function f(e){return(e=>{if(Array.isArray(e))return i(e)})(e)||(e=>{if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)})(e)||p(e)||(()=>{throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")})()}function p(e,t){var o;if(e)return"string"==typeof e?i(e,t):"Map"===(o="Object"===(o={}.toString.call(e).slice(8,-1))&&e.constructor?e.constructor.name:o)||"Set"===o?Array.from(e):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?i(e,t):void 0}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var o=0,r=Array(t);o<t;o++)r[o]=e[o];return r}function h(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(e=>(e=((e,t)=>{if("object"!=a(e)||!e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===t?String:Number)(e);if("object"!=a(o=o.call(e,t||"default")))return o;throw new TypeError("@@toPrimitive must return a primitive value.")})(e,"string"),"symbol"==a(e)?e:e+""))(r.key),r)}}function g(e,t,o){return t&&h(e.prototype,t),o&&h(e,o),Object.defineProperty(e,"prototype",{writable:!1}),e}o.Tuxboard=g(function e(){var i=this;if(!(this instanceof e))throw new TypeError("Cannot call a class as a function");this.selector=n.defaultDashboardSelector,this.dashboard=document.querySelector(this.selector),this.service=new u.TuxboardService,this.getDashboardId=function(){return(0,n.getDataId)(i.dashboard)},this.getTab=function(){return new l.Tab(i.dashboard)},this.getColumns=function(e){return e.getColumns()},this.getWidget=function(e){return document.querySelector("".concat(n.defaultWidgetSelector,"[").concat(n.dataIdAttribute,"='").concat(e,"']"))},this.initialize=function(){i.attachWidgetToolbarEvents(),i.attachDragAndDropEvents()},this.getWidgetsByTab=function(e){return e.getLayout().getWidgetPlacements()},this.getAllColumns=function(){var e=((0<arguments.length&&void 0!==arguments[0]?arguments[0]:null)||i.getTab()).getLayoutRows(),t=[];return Array.from(e).map(function(e){e=i.getColumns(e);t.push.apply(t,f(e))}),t},this.getLayoutRowCollection=function(){var e=(0<arguments.length&&void 0!==arguments[0]?arguments[0]:null)||i.getTab();return Array.from(e.getLayoutRows())},this.getWidgets=function(){var e=(0<arguments.length&&void 0!==arguments[0]?arguments[0]:null)||i.getTab(),n=[];return e.getLayoutRows().map(function(r){i.getColumns(r).map(function(e,t){var o=r.getLayoutRowId(),e=new c.WidgetCollection(e.getDom(),t,o).getWidgets();0<e.length&&n.push(e)})}),n},this.getService=function(){return i.service},this.refresh=function(){i.service.refresh().then(function(e){i.updateDashboard(e)})},this.updateDashboard=function(e){e&&(document.querySelector(n.defaultDashboardSelector).innerHTML=e,i.attachWidgetToolbarEvents(),i.attachDragAndDropEvents())},this.attachWidgetToolbarEvents=function(){i.dashboard.querySelectorAll(n.defaultWidgetRemoveWidgetSelector).forEach(function(e){e.addEventListener("click",function(e){return i.removeWidget(e)})}),document.querySelectorAll(n.defaultDropdownInWidgetHeaderSelector).forEach(function(e){e.addEventListener("click",function(){return r.Dropdown.getOrCreateInstance(e).toggle()})}),document.querySelectorAll(n.defaultWidgetStateSelector).forEach(function(e){e.addEventListener("click",function(e){i.setWidgetState(e)})})},this.setWidgetState=function(e){var e=e.target,e=(0,n.getClosestByClass)(e,(0,n.noPeriod)(n.defaultWidgetSelector)),t=i.getWidgetState(e);t.collapsed=!t.collapsed,i.service.setWidgetState(t.id,t.collapsed).then(function(e){return e.ok&&i.updateWidgetState(t.id,t.collapsed),e})},this.updateWidgetState=function(e,t){var e=i.getWidget(e),o=e.querySelector(n.defaultWidgetStateSelector),r=o.querySelector("i");t?(e.classList.add(n.collapsedToggleSelector),o.setAttribute("title","Restore"),r.setAttribute("class","fa-regular fa-window-maximize")):(e.classList.remove(n.collapsedToggleSelector),o.setAttribute("title","Minimize"),r.setAttribute("class","fa-solid fa-window-minimize"))},this.getWidgetState=function(e){return{id:e.getAttribute(n.dataIdAttribute),collapsed:e.classList.contains(n.collapsedToggleSelector)}},this.removeWidget=function(e){e.preventDefault();var e=e.target,t=(0,n.getClosestByClass)(e,(0,n.noPeriod)(n.defaultWidgetSelector)),e=t.getAttribute(n.dataIdAttribute);i.service.removeWidget(e).then(function(e){return e.ok&&t.remove(),e})},this.attachDragAndDropEvents=function(){var e,t=((e,t)=>{var o,r,n,i,a="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(a)return n=!(r=!0),{s:function(){a=a.call(e)},n:function(){var e=a.next();return r=e.done,e},e:function(e){n=!0,o=e},f:function(){try{r||null==a.return||a.return()}finally{if(n)throw o}}};if(Array.isArray(e)||(a=p(e))||t&&e&&"number"==typeof e.length)return a&&(e=a),i=0,{s:t=function(){},n:function(){return i>=e.length?{done:!0}:{done:!1,value:e[i++]}},e:function(e){throw e},f:t};throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")})(i.getAllColumns(i.getTab()));try{for(t.s();!(e=t.n()).done;)(()=>{var t=e.value;t.getDom().addEventListener("dragstart",function(e){i.dragStart(e,t)},!1),t.getDom().addEventListener("dragover",i.dragover,!1),t.getDom().addEventListener("dragenter",i.dragenter,!1),t.getDom().addEventListener("dragleave",i.dragLeave,!1),t.getDom().addEventListener("drop",function(e){i.drop(e)},!1),t.getDom().addEventListener("dragend",function(e){i.dragEnd(e)},!1)})()}catch(e){t.e(e)}finally{t.f()}},this.dragStart=function(e,t){e.stopPropagation&&e.stopPropagation(),e.dataTransfer.effectAllowed="move";var o=e.target;i.dragInfo=new s.DragWidgetInfo(o.getAttribute(n.dataIdAttribute),t.getIndex(),t.layoutRowId,t.getIndex(),t.layoutRowId),e.dataTransfer.setData("text",JSON.stringify(i.dragInfo))},this.dragover=function(e){return e.preventDefault&&e.preventDefault(),e.stopPropagation&&e.stopPropagation(),e.dataTransfer.dropEffect="move",(0,n.isWidgetOrColumn)(e.target)},this.dragenter=function(e){e.preventDefault&&e.preventDefault(),e.stopPropagation&&e.stopPropagation();e=e.target;(0,n.isWidgetOrColumn)(e)&&e.classList.add("over")},this.dragLeave=function(e){e.preventDefault&&e.preventDefault(),e.stopPropagation&&e.stopPropagation();e=e.target;(0,n.isWidgetOrColumn)(e)&&e.classList.remove("over")},this.drop=function(e){e.preventDefault&&e.preventDefault(),e.stopPropagation&&e.stopPropagation();var t,o,r=e.target,e=(i.dragInfo=JSON.parse(e.dataTransfer.getData("text")),document.querySelector("[".concat(n.dataIdAttribute,"='").concat(i.dragInfo.placementId,"'")));(0,n.isWidget)(r)?(t=(0,n.getClosestByClass)(r,(0,n.noPeriod)(n.defaultWidgetSelector)),(o=(0,n.getClosestByClass)(r,(0,n.noPeriod)(n.defaultColumnSelector)))&&t&&o.insertBefore(e,t)):r.classList.contains(n.defaultColumnSelector.substr(1))&&((o=(0,n.getClosestByClass)(r,n.defaultWidgetSelector))?r.insertBefore(e,o):r.append(e))},this.dragEnd=function(e){e.preventDefault&&e.preventDefault(),e.stopPropagation&&e.stopPropagation(),i.dashboard.querySelectorAll(n.defaultColumnSelector).forEach(function(e){return e.classList.remove("over")}),i.dashboard.querySelectorAll(n.defaultWidgetHeaderSelector).forEach(function(e){return e.classList.remove("over")});var t=i.dragInfo.placementId,o=(i.dragInfo.placementList=(0,n.getWidgetSnapshot)(i.dragInfo,i.getTab()),i.dragInfo.placementList.filter(function(e){return e.placementId===t}));o&&0<o.length&&(i.dragInfo.currentLayoutRowId=o[0].layoutRowId,i.dragInfo.currentColumnIndex=o[0].columnIndex),i.service.saveWidgetPlacement(e,i.dragInfo).then(function(e){return console.log("Saved.")}),e.dataTransfer.clearData()}})},{"./common":4,"./dto/dragWidgetInfo":13,"./models/tab":19,"./services/TuxboardService":21,"./widget/widgetCollection":32,bootstrap:2}],32:[function(e,t,o){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(o,"__esModule",{value:!0}),o.WidgetCollection=void 0;var i=e("./widgetPlacement"),a=e("../common");function r(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(e=>(e=((e,t)=>{if("object"!=n(e)||!e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===t?String:Number)(e);if("object"!=n(o=o.call(e,t||"default")))return o;throw new TypeError("@@toPrimitive must return a primitive value.")})(e,"string"),"symbol"==n(e)?e:e+""))(r.key),r)}}function s(e,t,o){return t&&r(e.prototype,t),o&&r(e,o),Object.defineProperty(e,"prototype",{writable:!1}),e}o.WidgetCollection=s(function e(t,o,r){var n=this;if(!(this instanceof e))throw new TypeError("Cannot call a class as a function");this.parent=t,this.columnIndex=o,this.layoutRowId=r,this.selector=a.defaultWidgetSelector,this.collection=Array.from(this.parent.querySelectorAll(this.selector)),this.getWidgetSelector=function(){return n.selector},this.getWidgets=function(){return n.collection.map(function(e,t){return n.createWidget(e,t)})},this.getWidgetProperties=function(e){return e.getProperties()},this.createWidget=function(e,t){e=e.getAttribute(a.dataIdAttribute);return new i.WidgetPlacement(n.parent,e,t,n.columnIndex)}})},{"../common":4,"./widgetPlacement":33}],33:[function(e,t,o){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(o,"__esModule",{value:!0}),o.WidgetPlacement=void 0;var l=e("../common"),u=e("../dto/WidgetProperties");function r(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(e=>(e=((e,t)=>{if("object"!=n(e)||!e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===t?String:Number)(e);if("object"!=n(o=o.call(e,t||"default")))return o;throw new TypeError("@@toPrimitive must return a primitive value.")})(e,"string"),"symbol"==n(e)?e:e+""))(r.key),r)}}function i(e,t,o){return t&&r(e.prototype,t),o&&r(e,o),Object.defineProperty(e,"prototype",{writable:!1}),e}o.WidgetPlacement=i(function e(t){var o=this,r=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"",n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0,i=3<arguments.length&&void 0!==arguments[3]?arguments[3]:0,a=this,s=e;if(!(a instanceof s))throw new TypeError("Cannot call a class as a function");this.parent=t,this.placementId=r,this.index=n,this.columnIndex=i,this.selector=l.defaultWidgetSelector,this.widgetOverlaySelector=l.defaultGeneralOverlaySelector+l.defaultLoadingSelector,this.getSelectorWithPlacementId=function(e){return"[".concat(o.getAttributeName(),"='").concat(e,"']")},this.getSelector=function(){return"".concat(o.selector,"[").concat(o.getAttributeName(),"='").concat(o.placementId,"']")},this.getDom=function(){return document.querySelector(o.getSelector())},this.getOverlay=function(){return o.getDom().querySelector(o.widgetOverlaySelector)},this.isCollapsed=function(){return o.getDom().classList.contains(l.collapsedToggleSelector)},this.isStatic=function(){return"true"===o.getDom().getAttribute(l.staticAttribute)},this.getBody=function(){return o.getDom().querySelector(l.defaultWidgetBodySelector)},this.hideBody=function(){var e=o.getBody();e&&(0,l.hideElement)(e)},this.showBody=function(){var e=o.getBody();e&&(0,l.showElement)(e)},this.showOverlay=function(){var e=o.getOverlay();e&&(0,l.showElement)(e)},this.hideOverlay=function(){var e=o.getOverlay();e&&(0,l.hideElement)(e)},this.getAttributeName=function(){return l.dataIdAttribute},this.getPlacementId=function(){return o.placementId},this.getProperties=function(){return new u.WidgetProperties(o.placementId,o.columnIndex,o.index,o.parent.getAttribute(o.getAttributeName()))}})},{"../common":4,"../dto/WidgetProperties":12}]},{},[3]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
