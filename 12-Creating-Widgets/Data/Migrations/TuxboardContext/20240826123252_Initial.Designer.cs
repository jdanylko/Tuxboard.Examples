// <auto-generated />

#nullable disable

using CreatingWidgets.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;

namespace CreatingWidgets.Data.Migrations.TuxboardContext
{
    [DbContext(typeof(TuxboardRoleDbContext))]
    [Migration("20240826123252_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DefaultWidgets.Identity.TuxboardRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TuxboardRole", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("31c3df95-fdc6-4fb5-82ab-0436ea93c1b1"),
                            ConcurrencyStamp = "e776afa8-cd36-47eb-b066-ae6469468b1e",
                            Name = "Basic",
                            NormalizedName = "BASIC"
                        },
                        new
                        {
                            Id = new Guid("7e69eb1f-07c0-46a1-b4e8-86f56386c250"),
                            ConcurrencyStamp = "8d58fe18-6ac9-4886-b0f5-276b52b411e1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("DefaultWidgets.Identity.TuxboardRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("TuxboardRoleClaim", "dbo");
                });

            modelBuilder.Entity("DefaultWidgets.Identity.TuxboardUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TuxboardUser", "dbo");
                });

            modelBuilder.Entity("DefaultWidgets.Identity.TuxboardUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TuxboardUserClaim", "dbo");
                });

            modelBuilder.Entity("DefaultWidgets.Identity.TuxboardUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("TuxboardUserLogin", "dbo");
                });

            modelBuilder.Entity("DefaultWidgets.Identity.TuxboardUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("TuxboardUserRole", "dbo");
                });

            modelBuilder.Entity("DefaultWidgets.Identity.TuxboardUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("TuxboardUserToken", "dbo");
                });

            modelBuilder.Entity("DefaultWidgets.Models.RoleDefaultDashboard", b =>
                {
                    b.Property<Guid>("DefaultDashboardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DefaultDashboardId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleDefaultDashboards", "dbo");

                    b.HasData(
                        new
                        {
                            DefaultDashboardId = new Guid("0d96a18e-90b8-4a9f-9df1-126653d68fe6"),
                            RoleId = new Guid("7e69eb1f-07c0-46a1-b4e8-86f56386c250")
                        },
                        new
                        {
                            DefaultDashboardId = new Guid("1623f469-d9f0-400c-8a4c-b4366233f485"),
                            RoleId = new Guid("31c3df95-fdc6-4fb5-82ab-0436ea93c1b1")
                        });
                });

            modelBuilder.Entity("DefaultWidgets.Models.WidgetRole", b =>
                {
                    b.Property<Guid>("WidgetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WidgetId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("WidgetRole", "dbo");
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.Dashboard", b =>
                {
                    b.Property<Guid>("DashboardId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("SelectedTab")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DashboardId");

                    b.ToTable("Dashboard", "dbo");
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.DashboardDefault", b =>
                {
                    b.Property<Guid>("DefaultId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("LayoutId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int");

                    b.HasKey("DefaultId");

                    b.HasIndex(new[] { "LayoutId" }, "IX_DashboardDefault_LayoutId");

                    b.HasIndex(new[] { "PlanId" }, "IX_DashboardDefault_PlanId");

                    b.ToTable("DashboardDefault", "dbo");

                    b.HasData(
                        new
                        {
                            DefaultId = new Guid("0d96a18e-90b8-4a9f-9df1-126653d68fe6"),
                            LayoutId = new Guid("5267da05-afe4-4753-9cee-d5d32c2b068e")
                        },
                        new
                        {
                            DefaultId = new Guid("1623f469-d9f0-400c-8a4c-b4366233f485"),
                            LayoutId = new Guid("239c89ed-3310-40d8-9104-237659415392")
                        });
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.DashboardDefaultWidget", b =>
                {
                    b.Property<Guid>("DefaultWidgetId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("ColumnIndex")
                        .HasColumnType("int");

                    b.Property<Guid>("DashboardDefaultId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LayoutRowId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WidgetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WidgetIndex")
                        .HasColumnType("int");

                    b.HasKey("DefaultWidgetId");

                    b.HasIndex(new[] { "DashboardDefaultId" }, "IX_DashboardDefaultWidget_DashboardDefaultId");

                    b.HasIndex(new[] { "LayoutRowId" }, "IX_DashboardDefaultWidget_LayoutRowId");

                    b.HasIndex(new[] { "WidgetId" }, "IX_DashboardDefaultWidget_WidgetId");

                    b.ToTable("DashboardDefaultWidget", "dbo");

                    b.HasData(
                        new
                        {
                            DefaultWidgetId = new Guid("d21e94cf-86a9-4058-bb72-f269728ac8ad"),
                            ColumnIndex = 0,
                            DashboardDefaultId = new Guid("0d96a18e-90b8-4a9f-9df1-126653d68fe6"),
                            LayoutRowId = new Guid("d58afcd2-2007-4fd0-87a9-93c85c667f3f"),
                            WidgetId = new Guid("c9a9db53-14ca-4551-87e7-f9656f39a396"),
                            WidgetIndex = 0
                        },
                        new
                        {
                            DefaultWidgetId = new Guid("d804e116-e80b-49c1-9c30-0ea989d88aad"),
                            ColumnIndex = 1,
                            DashboardDefaultId = new Guid("1623f469-d9f0-400c-8a4c-b4366233f485"),
                            LayoutRowId = new Guid("62487409-221b-40ff-a62b-fc3046b97ccb"),
                            WidgetId = new Guid("ee84443b-7ee7-4754-bb3c-313cc0da6039"),
                            WidgetIndex = 1
                        });
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.DashboardTab", b =>
                {
                    b.Property<Guid>("TabId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("DashboardId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TabIndex")
                        .HasColumnType("int");

                    b.Property<string>("TabTitle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("TabId");

                    b.HasIndex(new[] { "DashboardId" }, "IX_DashboardTab_DashboardId");

                    b.ToTable("DashboardTab", "dbo");
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.Layout", b =>
                {
                    b.Property<Guid>("LayoutId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("LayoutIndex")
                        .HasColumnType("int");

                    b.Property<Guid?>("TabId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LayoutId");

                    b.HasIndex(new[] { "TabId" }, "IX_Layout_TabId");

                    b.ToTable("Layout", "dbo");

                    b.HasData(
                        new
                        {
                            LayoutId = new Guid("5267da05-afe4-4753-9cee-d5d32c2b068e"),
                            LayoutIndex = 1
                        },
                        new
                        {
                            LayoutId = new Guid("239c89ed-3310-40d8-9104-237659415392"),
                            LayoutIndex = 1
                        });
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.LayoutRow", b =>
                {
                    b.Property<Guid>("LayoutRowId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("LayoutId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LayoutTypeId")
                        .HasColumnType("int");

                    b.Property<int>("RowIndex")
                        .HasColumnType("int");

                    b.HasKey("LayoutRowId");

                    b.HasIndex(new[] { "LayoutId" }, "IX_LayoutRow_LayoutId");

                    b.HasIndex(new[] { "LayoutTypeId" }, "IX_LayoutRow_LayoutTypeId");

                    b.ToTable("LayoutRow", "dbo");

                    b.HasData(
                        new
                        {
                            LayoutRowId = new Guid("d58afcd2-2007-4fd0-87a9-93c85c667f3f"),
                            LayoutId = new Guid("5267da05-afe4-4753-9cee-d5d32c2b068e"),
                            LayoutTypeId = 4,
                            RowIndex = 0
                        },
                        new
                        {
                            LayoutRowId = new Guid("62487409-221b-40ff-a62b-fc3046b97ccb"),
                            LayoutId = new Guid("239c89ed-3310-40d8-9104-237659415392"),
                            LayoutTypeId = 4,
                            RowIndex = 0
                        });
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.LayoutType", b =>
                {
                    b.Property<int>("LayoutTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LayoutTypeId"));

                    b.Property<string>("Layout")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("LayoutTypeId");

                    b.ToTable("LayoutType", "dbo");

                    b.HasData(
                        new
                        {
                            LayoutTypeId = 1,
                            Layout = "col-4/col-4/col-4",
                            Title = "Three Columns, Equal"
                        },
                        new
                        {
                            LayoutTypeId = 2,
                            Layout = "col-3/col-6/col-3",
                            Title = "Three Columns, 50% Middle"
                        },
                        new
                        {
                            LayoutTypeId = 3,
                            Layout = "col-3/col-3/col-3/col-3",
                            Title = "Four Columns, 25%"
                        },
                        new
                        {
                            LayoutTypeId = 4,
                            Layout = "col-6/col-6",
                            Title = "Two Columns, 50%"
                        });
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.Plan", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PlanId");

                    b.ToTable("Plan", "dbo");
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.Widget", b =>
                {
                    b.Property<Guid>("WidgetId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Moveable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Permission")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("UseSettings")
                        .HasColumnType("bit");

                    b.Property<bool>("UseTemplate")
                        .HasColumnType("bit");

                    b.HasKey("WidgetId");

                    b.ToTable("Widget", "dbo");

                    b.HasData(
                        new
                        {
                            WidgetId = new Guid("1885170c-7c48-4557-abc7-bc06d3fc51ee"),
                            CanDelete = false,
                            Description = "Display General Information",
                            GroupName = "General",
                            ImageUrl = "",
                            Moveable = false,
                            Name = "generalinfo",
                            Permission = 0,
                            Title = "General Info",
                            UseSettings = false,
                            UseTemplate = false
                        },
                        new
                        {
                            WidgetId = new Guid("c9a9db53-14ca-4551-87e7-f9656f39a396"),
                            CanDelete = true,
                            Description = "A Simple Hello World Widget",
                            GroupName = "Example",
                            ImageUrl = "",
                            Moveable = true,
                            Name = "helloworld",
                            Permission = 0,
                            Title = "Hello World",
                            UseSettings = true,
                            UseTemplate = true
                        },
                        new
                        {
                            WidgetId = new Guid("ee84443b-7ee7-4754-bb3c-313cc0da6039"),
                            CanDelete = true,
                            Description = "Demonstration of data table",
                            GroupName = "General",
                            ImageUrl = "",
                            Moveable = true,
                            Name = "table",
                            Permission = 0,
                            Title = "Sample Table",
                            UseSettings = true,
                            UseTemplate = true
                        });
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.WidgetDefault", b =>
                {
                    b.Property<Guid>("WidgetDefaultId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("DefaultValue")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("SettingIndex")
                        .HasColumnType("int");

                    b.Property<string>("SettingName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SettingTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<short>("SettingType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("WidgetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WidgetDefaultId");

                    b.HasIndex(new[] { "WidgetId" }, "IX_WidgetDefault_WidgetId");

                    b.ToTable("WidgetDefault", "dbo");

                    b.HasData(
                        new
                        {
                            WidgetDefaultId = new Guid("046f4aa8-5e45-4c86-b2f8-cbf3e42647e7"),
                            DefaultValue = "Sample Table",
                            SettingIndex = 1,
                            SettingName = "widgettitle",
                            SettingTitle = "Title",
                            SettingType = (short)0,
                            WidgetId = new Guid("ee84443b-7ee7-4754-bb3c-313cc0da6039")
                        },
                        new
                        {
                            WidgetDefaultId = new Guid("5c85537a-1319-48ed-a475-83d3dc3e7a8d"),
                            DefaultValue = "Projects",
                            SettingIndex = 1,
                            SettingName = "widgettitle",
                            SettingTitle = "Title",
                            SettingType = (short)0,
                            WidgetId = new Guid("c9a9db53-14ca-4551-87e7-f9656f39a396")
                        });
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.WidgetDefaultOption", b =>
                {
                    b.Property<Guid>("WidgetOptionId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("SettingIndex")
                        .HasColumnType("int");

                    b.Property<string>("SettingLabel")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<Guid>("WidgetDefaultId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WidgetOptionId")
                        .HasName("PK_WidgetSettingOption");

                    b.HasIndex(new[] { "WidgetDefaultId" }, "IX_WidgetDefaultOption_WidgetDefaultId");

                    b.ToTable("WidgetDefaultOption", "dbo");
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.WidgetPlacement", b =>
                {
                    b.Property<Guid>("WidgetPlacementId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Collapsed")
                        .HasColumnType("bit");

                    b.Property<int>("ColumnIndex")
                        .HasColumnType("int");

                    b.Property<Guid>("LayoutRowId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("UseSettings")
                        .HasColumnType("bit");

                    b.Property<bool>("UseTemplate")
                        .HasColumnType("bit");

                    b.Property<Guid>("WidgetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WidgetIndex")
                        .HasColumnType("int");

                    b.HasKey("WidgetPlacementId");

                    b.HasIndex(new[] { "LayoutRowId" }, "IX_WidgetPlacement_LayoutRowId");

                    b.HasIndex(new[] { "WidgetId" }, "IX_WidgetPlacement_WidgetId");

                    b.ToTable("WidgetPlacement", "dbo");
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.WidgetSetting", b =>
                {
                    b.Property<Guid>("WidgetSettingId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Value")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<Guid>("WidgetDefaultId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WidgetPlacementId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WidgetSettingId");

                    b.HasIndex(new[] { "WidgetDefaultId" }, "IX_WidgetSetting_WidgetDefaultId");

                    b.HasIndex(new[] { "WidgetPlacementId" }, "IX_WidgetSetting_WidgetPlacementId");

                    b.ToTable("WidgetSetting", "dbo");
                });

            modelBuilder.Entity("WidgetPlan", b =>
                {
                    b.Property<Guid>("WidgetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.HasKey("WidgetId", "PlanId");

                    b.HasIndex(new[] { "PlanId" }, "IX_WidgetPlan_PlanId");

                    b.ToTable("WidgetPlan", "dbo");
                });

            modelBuilder.Entity("DefaultWidgets.Identity.TuxboardRoleClaim", b =>
                {
                    b.HasOne("DefaultWidgets.Identity.TuxboardRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DefaultWidgets.Identity.TuxboardUserClaim", b =>
                {
                    b.HasOne("DefaultWidgets.Identity.TuxboardUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DefaultWidgets.Identity.TuxboardUserLogin", b =>
                {
                    b.HasOne("DefaultWidgets.Identity.TuxboardUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DefaultWidgets.Identity.TuxboardUserRole", b =>
                {
                    b.HasOne("DefaultWidgets.Identity.TuxboardRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DefaultWidgets.Identity.TuxboardUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DefaultWidgets.Identity.TuxboardUserToken", b =>
                {
                    b.HasOne("DefaultWidgets.Identity.TuxboardUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DefaultWidgets.Models.RoleDefaultDashboard", b =>
                {
                    b.HasOne("Tuxboard.Core.Domain.Entities.DashboardDefault", "DefaultDashboard")
                        .WithMany()
                        .HasForeignKey("DefaultDashboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DefaultWidgets.Identity.TuxboardRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultDashboard");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DefaultWidgets.Models.WidgetRole", b =>
                {
                    b.HasOne("DefaultWidgets.Identity.TuxboardRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tuxboard.Core.Domain.Entities.Widget", "Widget")
                        .WithMany()
                        .HasForeignKey("WidgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Widget");
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.DashboardDefault", b =>
                {
                    b.HasOne("Tuxboard.Core.Domain.Entities.Layout", "Layout")
                        .WithMany("DashboardDefaults")
                        .HasForeignKey("LayoutId")
                        .IsRequired()
                        .HasConstraintName("FK_DashboardDefault_Layout");

                    b.HasOne("Tuxboard.Core.Domain.Entities.Plan", "Plan")
                        .WithMany("DashboardDefaults")
                        .HasForeignKey("PlanId")
                        .HasConstraintName("FK_DashboardDefault_Plan");

                    b.Navigation("Layout");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.DashboardDefaultWidget", b =>
                {
                    b.HasOne("Tuxboard.Core.Domain.Entities.DashboardDefault", "DashboardDefault")
                        .WithMany("DashboardDefaultWidgets")
                        .HasForeignKey("DashboardDefaultId")
                        .IsRequired()
                        .HasConstraintName("FK_DashboardDefaultWidget_DashboardDefault");

                    b.HasOne("Tuxboard.Core.Domain.Entities.LayoutRow", "LayoutRow")
                        .WithMany("DashboardDefaultWidgets")
                        .HasForeignKey("LayoutRowId")
                        .IsRequired()
                        .HasConstraintName("FK_DashboardDefaultWidget_LayoutRow");

                    b.HasOne("Tuxboard.Core.Domain.Entities.Widget", "Widget")
                        .WithMany("DashboardDefaultWidgets")
                        .HasForeignKey("WidgetId")
                        .IsRequired()
                        .HasConstraintName("FK_DashboardDefaultWidget_Widget");

                    b.Navigation("DashboardDefault");

                    b.Navigation("LayoutRow");

                    b.Navigation("Widget");
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.DashboardTab", b =>
                {
                    b.HasOne("Tuxboard.Core.Domain.Entities.Dashboard", "Dashboard")
                        .WithMany("Tabs")
                        .HasForeignKey("DashboardId")
                        .IsRequired()
                        .HasConstraintName("FK_DashboardTab_Dashboard");

                    b.Navigation("Dashboard");
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.Layout", b =>
                {
                    b.HasOne("Tuxboard.Core.Domain.Entities.DashboardTab", "Tab")
                        .WithMany("Layouts")
                        .HasForeignKey("TabId")
                        .HasConstraintName("FK_DashboardLayout_DashboardTab");

                    b.Navigation("Tab");
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.LayoutRow", b =>
                {
                    b.HasOne("Tuxboard.Core.Domain.Entities.Layout", "Layout")
                        .WithMany("LayoutRows")
                        .HasForeignKey("LayoutId");

                    b.HasOne("Tuxboard.Core.Domain.Entities.LayoutType", "LayoutType")
                        .WithMany("LayoutRows")
                        .HasForeignKey("LayoutTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LayoutRow_LayoutType");

                    b.Navigation("Layout");

                    b.Navigation("LayoutType");
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.WidgetDefault", b =>
                {
                    b.HasOne("Tuxboard.Core.Domain.Entities.Widget", "Widget")
                        .WithMany("WidgetDefaults")
                        .HasForeignKey("WidgetId")
                        .IsRequired()
                        .HasConstraintName("FK_WidgetDefault_Widget");

                    b.Navigation("Widget");
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.WidgetDefaultOption", b =>
                {
                    b.HasOne("Tuxboard.Core.Domain.Entities.WidgetDefault", "WidgetDefault")
                        .WithMany("WidgetDefaultOptions")
                        .HasForeignKey("WidgetDefaultId")
                        .IsRequired()
                        .HasConstraintName("FK_WidgetDefaultOption_WidgetDefault");

                    b.Navigation("WidgetDefault");
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.WidgetPlacement", b =>
                {
                    b.HasOne("Tuxboard.Core.Domain.Entities.LayoutRow", "LayoutRow")
                        .WithMany("WidgetPlacements")
                        .HasForeignKey("LayoutRowId")
                        .IsRequired()
                        .HasConstraintName("FK_WidgetPlacement_LayoutRow1");

                    b.HasOne("Tuxboard.Core.Domain.Entities.Widget", "Widget")
                        .WithMany("WidgetPlacements")
                        .HasForeignKey("WidgetId")
                        .IsRequired()
                        .HasConstraintName("FK_WidgetPlacement_Widget1");

                    b.Navigation("LayoutRow");

                    b.Navigation("Widget");
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.WidgetSetting", b =>
                {
                    b.HasOne("Tuxboard.Core.Domain.Entities.WidgetDefault", "WidgetDefault")
                        .WithMany("WidgetSettings")
                        .HasForeignKey("WidgetDefaultId")
                        .IsRequired()
                        .HasConstraintName("FK_WidgetSetting_WidgetDefault");

                    b.HasOne("Tuxboard.Core.Domain.Entities.WidgetPlacement", "WidgetPlacement")
                        .WithMany("WidgetSettings")
                        .HasForeignKey("WidgetPlacementId")
                        .IsRequired()
                        .HasConstraintName("FK_WidgetSetting_WidgetPlacement");

                    b.Navigation("WidgetDefault");

                    b.Navigation("WidgetPlacement");
                });

            modelBuilder.Entity("WidgetPlan", b =>
                {
                    b.HasOne("Tuxboard.Core.Domain.Entities.Plan", null)
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .IsRequired()
                        .HasConstraintName("FK_WidgetPlan_Plan");

                    b.HasOne("Tuxboard.Core.Domain.Entities.Widget", null)
                        .WithMany()
                        .HasForeignKey("WidgetId")
                        .IsRequired()
                        .HasConstraintName("FK_WidgetPlan_Widget");
                });

            modelBuilder.Entity("DefaultWidgets.Identity.TuxboardRole", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DefaultWidgets.Identity.TuxboardUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Tokens");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.Dashboard", b =>
                {
                    b.Navigation("Tabs");
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.DashboardDefault", b =>
                {
                    b.Navigation("DashboardDefaultWidgets");
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.DashboardTab", b =>
                {
                    b.Navigation("Layouts");
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.Layout", b =>
                {
                    b.Navigation("DashboardDefaults");

                    b.Navigation("LayoutRows");
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.LayoutRow", b =>
                {
                    b.Navigation("DashboardDefaultWidgets");

                    b.Navigation("WidgetPlacements");
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.LayoutType", b =>
                {
                    b.Navigation("LayoutRows");
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.Plan", b =>
                {
                    b.Navigation("DashboardDefaults");
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.Widget", b =>
                {
                    b.Navigation("DashboardDefaultWidgets");

                    b.Navigation("WidgetDefaults");

                    b.Navigation("WidgetPlacements");
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.WidgetDefault", b =>
                {
                    b.Navigation("WidgetDefaultOptions");

                    b.Navigation("WidgetSettings");
                });

            modelBuilder.Entity("Tuxboard.Core.Domain.Entities.WidgetPlacement", b =>
                {
                    b.Navigation("WidgetSettings");
                });
#pragma warning restore 612, 618
        }
    }
}
